{
    "info": {
        "_postman_id": "321038cc-53ab-4446-8ae3-3af834ceb176",
        "name": "Tunemyles",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "example",
            "item": [
                {
                    "name": "GET Example",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('Get Success', () => {\r",
                                    "        const statusCode = response.code\r",
                                    "        const contentType = response.headers.toObject()['content-type']\r",
                                    "        const isSuccess = response.json().success\r",
                                    "\r",
                                    "        pm.expect(statusCode).to.eql(200);\r",
                                    "        pm.expect(contentType).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(isSuccess).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{URL}}/example",
                            "host": ["{{URL}}"],
                            "path": ["example"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "POST Example",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    header: pm.request.headers.toObject(),\r",
                                    "    body: pm.request.body\r",
                                    "})\r",
                                    "\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('Post Success', () => {\r",
                                    "        const statusCode = response.code\r",
                                    "        const contentType = response.headers.toObject()['content-type']\r",
                                    "        const isSuccess = response.json().success\r",
                                    "\r",
                                    "        pm.expect(statusCode).to.eql(200);\r",
                                    "        pm.expect(contentType).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(isSuccess).to.eql(true);\r",
                                    "    })\r",
                                    "});\r",
                                    "\r",
                                    "const sendRequestTwo = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    header: pm.request.headers.toObject(),\r",
                                    "    body: {\r",
                                    "        mode: 'raw',\r",
                                    "        raw: JSON.stringify({})\r",
                                    "    }\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestTwo, (_, response) => {\r",
                                    "    pm.test('Post Fail, Validation Fail', () => {\r",
                                    "        const statusCode = response.code\r",
                                    "        const contentType = response.headers.toObject()['content-type']\r",
                                    "        const isSuccess = response.json().success\r",
                                    "\r",
                                    "        pm.expect(statusCode).to.eql(422)\r",
                                    "        pm.expect(contentType).to.eql(\"application/json; charset=utf-8\");\r",
                                    "        pm.expect(isSuccess).to.eql(false);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "description": "JSON Type",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"name\": \"name\"\r\n}"
                        },
                        "url": {
                            "raw": "{{URL}}/example",
                            "host": ["{{URL}}"],
                            "path": ["example"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "GET Single Example",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.environment.replaceIn(\"{{URL}}/example/{{EXAMPLE_ID}}\")\r",
                                    "})\r",
                                    "\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('Found Single Data', () => {\r",
                                    "        const statusCode = response.code\r",
                                    "        const contentType = response.headers.toObject()['content-type']\r",
                                    "        const isSuccess = response.json().success\r",
                                    "\r",
                                    "        pm.expect(statusCode).to.eql(200);\r",
                                    "        pm.expect(contentType).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(isSuccess).to.eql(true);\r",
                                    "    })\r",
                                    "});\r",
                                    "\r",
                                    "const sendRequestTwo = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.environment.replaceIn(\"{{URL}}/example/100\")\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestTwo, (_, response) => {\r",
                                    "    pm.test('Data Not Found', () => {\r",
                                    "        const statusCode = response.code\r",
                                    "        const contentType = response.headers.toObject()['content-type']\r",
                                    "        const isSuccess = response.json().success\r",
                                    "\r",
                                    "        pm.expect(statusCode).to.eql(404)\r",
                                    "        pm.expect(contentType).to.eql(\"application/json; charset=utf-8\");\r",
                                    "        pm.expect(isSuccess).to.eql(false);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{URL}}/example/:{{EXAMPLE_ID}}",
                            "host": ["{{URL}}"],
                            "path": ["example", ":{{EXAMPLE_ID}}"],
                            "variable": [
                                {
                                    "key": "{{EXAMPLE_ID}}",
                                    "value": ""
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "POST Example File",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "\r",
                                    "pm.test('Post File Success', () => {\r",
                                    "    const statusCode = pm.response.code\r",
                                    "    const contentType = pm.response.headers.toObject()['content-type']\r",
                                    "    const isSuccess = pm.response.json().success\r",
                                    "\r",
                                    "    pm.expect(statusCode).to.eql(200);\r",
                                    "    pm.expect(contentType).to.eql('application/json; charset=utf-8');\r",
                                    "    pm.expect(isSuccess).to.eql(true);\r",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "multipart/form-data",
                                "description": "Multipart",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "formdata",
                            "formdata": [
                                {
                                    "key": "file",
                                    "type": "file",
                                    "src": "Bliss.png"
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{URL}}/example/file",
                            "host": ["{{URL}}"],
                            "path": ["example", "file"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "GET Private Example",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    header: { key: \"1\" }\r",
                                    "})\r",
                                    "\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('Get Private Data Success', () => {\r",
                                    "        const statusCode = response.code\r",
                                    "        const contentType = response.headers.toObject()['content-type']\r",
                                    "        const isSuccess = response.json().success\r",
                                    "\r",
                                    "        pm.expect(statusCode).to.eql(200);\r",
                                    "        pm.expect(contentType).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(isSuccess).to.eql(true);\r",
                                    "    })\r",
                                    "});\r",
                                    "\r",
                                    "const sendRequestTwo = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestTwo, (_, response) => {\r",
                                    "    pm.test('Get Private Data Fail, Header Key Not Given', () => {\r",
                                    "        const statusCode = response.code\r",
                                    "        const contentType = response.headers.toObject()['content-type']\r",
                                    "        const isSuccess = response.json().success\r",
                                    "\r",
                                    "        pm.expect(statusCode).to.eql(403)\r",
                                    "        pm.expect(contentType).to.eql(\"application/json; charset=utf-8\");\r",
                                    "        pm.expect(isSuccess).to.eql(false);\r",
                                    "    })\r",
                                    "});\r",
                                    "\r",
                                    "const sendRequestThree = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    header: { key: \"2\" }\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestThree, (_, response) => {\r",
                                    "    pm.test('Get Private Data Fail, Wrong Header Key', () => {\r",
                                    "        const statusCode = response.code\r",
                                    "        const contentType = response.headers.toObject()['content-type']\r",
                                    "        const isSuccess = response.json().success\r",
                                    "\r",
                                    "        pm.expect(statusCode).to.eql(403)\r",
                                    "        pm.expect(contentType).to.eql(\"application/json; charset=utf-8\");\r",
                                    "        pm.expect(isSuccess).to.eql(false);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "key",
                                "value": "{{TOKEN}}",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "{{URL}}/example/private",
                            "host": ["{{URL}}"],
                            "path": ["example", "private"]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "auth",
            "item": [
                {
                    "name": "Regiter",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    body: pm.request.body\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "description": "JSON Type",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"full_name\": \"Name\",\r\n    \"username\": \"username\",\r\n    \"password\": \"password\",\r\n    \"phone_number\": \"1234567890\",\r\n    \"address\": \"address\"\r\n}"
                        },
                        "url": {
                            "raw": "{{URL}}/auth/register",
                            "host": ["{{URL}}"],
                            "path": ["auth", "register"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Login",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const token = pm.response.json()?.data?.token\r",
                                    "if (token) pm.environment.set('TOKEN', token)\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    body: pm.request.body\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "description": "JSON Type",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"username\": \"username\",\r\n    \"password\": \"password\"\r\n}"
                        },
                        "url": {
                            "raw": "{{URL}}/auth/login",
                            "host": ["{{URL}}"],
                            "path": ["auth", "login"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Profile",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{URL}}/auth/me",
                            "host": ["{{URL}}"],
                            "path": ["auth", "me"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Forgot Password",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    body: pm.request.body\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "description": "JSON Type",
                                "key": "Content-Type",
                                "type": "text",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"phone_number\": \"1234567890\"\r\n}"
                        },
                        "url": {
                            "raw": "{{URL}}/auth/forgot-password",
                            "host": ["{{URL}}"],
                            "path": ["auth", "forgot-password"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Verify Token",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{URL}}/auth/verify-token/:token",
                            "host": ["{{URL}}"],
                            "path": ["auth", "verify-token", ":token"],
                            "variable": [
                                {
                                    "key": "token",
                                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6IjU0NTUzNTg0OGJjZmE5NDdlODMwMzY3YzRiNDZmNDAxIiwiaWF0IjoxNjAwMDAzNTMyLCJleHAiOjE2MDAwMDcxMzJ9.Q1nFS_ZIC-YHjZr_oHuCD7mJOw28Y-czD8rcljDaHnI",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Reset Password",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    body: pm.request.body\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "description": "JSON Type",
                                "key": "Content-Type",
                                "type": "text",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"new_password\": \"newpassword\"\r\n}"
                        },
                        "url": {
                            "raw": "{{URL}}/auth/reset-password?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6IjU0NTUzNTg0OGJjZmE5NDdlODMwMzY3YzRiNDZmNDAxIiwiaWF0IjoxNjAwMDAzNTMyLCJleHAiOjE2MDAwMDcxMzJ9.Q1nFS_ZIC-YHjZr_oHuCD7mJOw28Y-czD8rcljDaHnI",
                            "host": ["{{URL}}"],
                            "path": ["auth", "reset-password"],
                            "query": [
                                {
                                    "key": "token",
                                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6IjU0NTUzNTg0OGJjZmE5NDdlODMwMzY3YzRiNDZmNDAxIiwiaWF0IjoxNjAwMDAzNTMyLCJleHAiOjE2MDAwMDcxMzJ9.Q1nFS_ZIC-YHjZr_oHuCD7mJOw28Y-czD8rcljDaHnI"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Update Profile",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [""],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.test('test success', () => {\r",
                                    "    pm.expect(response.code).to.eql(200);\r",
                                    "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "    pm.expect(response.json().success).to.eql(true);\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "multipart/form-data",
                                "description": "Multipart",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "formdata",
                            "formdata": [
                                {
                                    "key": "avatar",
                                    "type": "file",
                                    "src": "/C:/Users/ACER/Desktop/Wallpaper/luca-bravo-VowIFDxogG4-unsplash.jpg"
                                },
                                {
                                    "key": "full_name",
                                    "value": "Allosfdsfasfasdf",
                                    "type": "text"
                                },
                                {
                                    "key": "address",
                                    "value": "allo-allo",
                                    "type": "text"
                                },
                                {
                                    "key": "phone_number",
                                    "value": "123142135423",
                                    "type": "text"
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{URL}}/auth/update-profile",
                            "host": ["{{URL}}"],
                            "path": ["auth", "update-profile"]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "merchant",
            "item": [
                {
                    "name": "product",
                    "item": [
                        {
                            "name": "List Products",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": ""
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/products",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants", "products"],
                                    "query": [
                                        {
                                            "key": "orderDirection",
                                            "value": "",
                                            "description": "Available values: ASC, DESC",
                                            "disabled": true
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "",
                                            "description": "Available Fields: created_at,  product_name, market_name, market_address",
                                            "disabled": true
                                        },
                                        {
                                            "key": "search",
                                            "value": "",
                                            "description": "Available Fields: product_name, market_name, market_address",
                                            "disabled": true
                                        },
                                        {
                                            "key": "page",
                                            "value": null,
                                            "description": "Available values: 0...n",
                                            "disabled": true
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Add Product",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('test success', () => {\r",
                                            "    pm.expect(response.code).to.eql(200);\r",
                                            "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "    pm.expect(response.json().success).to.eql(true);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/form-data",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": [
                                        {
                                            "key": "product_name",
                                            "value": "name",
                                            "type": "text"
                                        },
                                        {
                                            "key": "description",
                                            "value": "description",
                                            "type": "text"
                                        },
                                        {
                                            "key": "cover",
                                            "type": "file",
                                            "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29924.jpg"
                                        },
                                        {
                                            "key": "price_default",
                                            "value": "1",
                                            "type": "text"
                                        },
                                        {
                                            "key": "price_selling",
                                            "value": "1",
                                            "type": "text"
                                        },
                                        {
                                            "key": "qty",
                                            "value": "1",
                                            "type": "text"
                                        },
                                        {
                                            "key": "discount",
                                            "value": "1",
                                            "type": "text"
                                        },
                                        {
                                            "key": "is_visible",
                                            "value": "1",
                                            "type": "text"
                                        }
                                    ]
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/products",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants", "products"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Update Product",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString(),\r",
                                            "    body: pm.request.body\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "description": "JSON Type",
                                        "key": "Content-Type",
                                        "type": "text",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"product_name\": \"new name\",\r\n    \"description\": \"new descs\",\r\n    \"price_default\": 2,\r\n    \"price_selling\": 2,\r\n    \"qty\": 2,\r\n    \"discount\": 2,\r\n    \"is_visible\": 2\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/products/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants", "products", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "1",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Delete Product",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/products/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants", "products", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "1",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Change Cover",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('test success', () => {\r",
                                            "    pm.expect(response.code).to.eql(200);\r",
                                            "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "    pm.expect(response.json().success).to.eql(true);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/form-data",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": [
                                        {
                                            "key": "cover",
                                            "type": "file",
                                            "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29924.jpg"
                                        }
                                    ]
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/products/:id/cover",
                                    "host": ["{{URL}}"],
                                    "path": [
                                        "merchants",
                                        "products",
                                        ":id",
                                        "cover"
                                    ],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "1",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Change Status",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString(),\r",
                                            "    body: pm.request.body\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json",
                                        "description": "JSON Type",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"is_visible\": 1\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/products/:id/status",
                                    "host": ["{{URL}}"],
                                    "path": [
                                        "merchants",
                                        "products",
                                        ":id",
                                        "status"
                                    ],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "1",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Bind Product Category",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString(),\r",
                                            "    body: pm.request.body\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json",
                                        "description": "JSON Type",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"id_category\": 1\r\n}",
                                    "options": {
                                        "raw": {
                                            "language": "json"
                                        }
                                    }
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/products/:id/categories",
                                    "host": ["{{URL}}"],
                                    "path": [
                                        "merchants",
                                        "products",
                                        ":id",
                                        "categories"
                                    ],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "1",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Delete Product Category",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": ""
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/products/:productId/categories/:categoryId",
                                    "host": ["{{URL}}"],
                                    "path": [
                                        "merchants",
                                        "products",
                                        ":productId",
                                        "categories",
                                        ":categoryId"
                                    ],
                                    "variable": [
                                        {
                                            "key": "productId",
                                            "value": "1",
                                            "type": "string"
                                        },
                                        {
                                            "key": "categoryId",
                                            "value": "69",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Product Image",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('test success', () => {\r",
                                            "    pm.expect(response.code).to.eql(200);\r",
                                            "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "    pm.expect(response.json().success).to.eql(true);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/form-data",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": [
                                        {
                                            "key": "image",
                                            "type": "file",
                                            "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29924.jpg"
                                        }
                                    ]
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/products/:id/image",
                                    "host": ["{{URL}}"],
                                    "path": [
                                        "merchants",
                                        "products",
                                        ":id",
                                        "image"
                                    ],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "1",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Remove Product Image",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "header": [],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": []
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/products/image/:id",
                                    "host": ["{{URL}}"],
                                    "path": [
                                        "merchants",
                                        "products",
                                        "image",
                                        ":id"
                                    ],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "1",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "order",
                    "item": [
                        {
                            "name": "List Merchant Orders",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": ""
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/orders",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants", "orders"],
                                    "query": [
                                        {
                                            "key": "orderDirection",
                                            "value": "",
                                            "description": "Available values: ASC, DESC",
                                            "disabled": true
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "",
                                            "description": "Available Fields: created_at,  full_name, phone_number, address",
                                            "disabled": true
                                        },
                                        {
                                            "key": "search",
                                            "value": "",
                                            "description": "Available Fields: full_name, phone_number, address",
                                            "disabled": true
                                        },
                                        {
                                            "key": "status",
                                            "value": "",
                                            "description": "Available values: 0, 1, 2",
                                            "disabled": true
                                        },
                                        {
                                            "key": "page",
                                            "value": null,
                                            "description": "Available values: 1, 2, ....",
                                            "disabled": true
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Get List Order Product",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": ""
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/orders/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants", "orders", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "1",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Update Order Product Status",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString(),\r",
                                            "    body: pm.request.body\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json",
                                        "description": "JSON Type",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"status\": 2\r\n}"
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/orders/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants", "orders", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "1",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "list",
                    "item": [
                        {
                            "name": "Get Merchant List",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": ""
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/list",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants", "list"],
                                    "query": [
                                        {
                                            "key": "orderDirection",
                                            "value": "",
                                            "description": "Available values: ASC, DESC",
                                            "disabled": true
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "",
                                            "description": "Available Fields: created_at,  full_name, phone_number, market_name, market_address",
                                            "disabled": true
                                        },
                                        {
                                            "key": "search",
                                            "value": "",
                                            "description": "Available Fields: full_name, phone_number, market_name, market_address",
                                            "disabled": true
                                        },
                                        {
                                            "key": "page",
                                            "value": null,
                                            "description": "Available values: 0...n",
                                            "disabled": true
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Get Merchant Product List",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": ""
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/list/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants", "list", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "1",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Get Random Merchants",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": ""
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/random",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants", "random"],
                                    "query": [
                                        {
                                            "key": "limit",
                                            "value": "",
                                            "description": "Available values: 0...n",
                                            "disabled": true
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "transaction",
                    "item": [
                        {
                            "name": "Get Merchant Transaction Histories",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": ""
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/transactions",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants", "transactions"],
                                    "query": [
                                        {
                                            "key": "date",
                                            "value": "",
                                            "description": "Available values: year-month-date",
                                            "disabled": true
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Get Merchant Incomes",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": ""
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/incomes",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants", "incomes"],
                                    "query": [
                                        {
                                            "key": "year",
                                            "value": "",
                                            "description": "Available values: year",
                                            "disabled": true
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "merchant",
                    "item": [
                        {
                            "name": "Create Merchant",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('test success', () => {\r",
                                            "    pm.expect(response.code).to.eql(200);\r",
                                            "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "    pm.expect(response.json().success).to.eql(true);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/form-data",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": [
                                        {
                                            "key": "no_identity",
                                            "value": "432871024147219",
                                            "type": "text"
                                        },
                                        {
                                            "key": "identity_photo",
                                            "type": "file",
                                            "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29929.jpg"
                                        },
                                        {
                                            "key": "market_photo",
                                            "type": "file",
                                            "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29924.jpg"
                                        },
                                        {
                                            "key": "market_name",
                                            "value": "name",
                                            "type": "text"
                                        },
                                        {
                                            "key": "market_address",
                                            "value": "address",
                                            "type": "text"
                                        },
                                        {
                                            "key": "market_lat",
                                            "value": "-6.213131231",
                                            "type": "text"
                                        },
                                        {
                                            "key": "market_lon",
                                            "value": "-6.213131231",
                                            "type": "text"
                                        },
                                        {
                                            "key": "market_close_time",
                                            "value": "21:00",
                                            "type": "text"
                                        }
                                    ]
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/activate",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants", "activate"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Update Merchant Close time",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString(),\r",
                                            "    body: pm.request.body\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json",
                                        "description": "JSON Type",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"market_close_time\": \"22:00\"\r\n}"
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/operation-time",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants", "operation-time"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Get Single Product",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": ""
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants/products/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants", "products", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "1",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Get Single Merchant",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": ""
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Update Merchant",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('test success', () => {\r",
                                            "    pm.expect(response.code).to.eql(200);\r",
                                            "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "    pm.expect(response.json().success).to.eql(true);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/form-data",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": [
                                        {
                                            "key": "market_photo",
                                            "type": "file",
                                            "src": "/C:/Users/ACER/Desktop/Wallpaper/luca-bravo-VowIFDxogG4-unsplash.jpg"
                                        },
                                        {
                                            "key": "no_identity",
                                            "value": "34212421414",
                                            "type": "text"
                                        },
                                        {
                                            "key": "market_name",
                                            "value": "New Market Name",
                                            "type": "text"
                                        },
                                        {
                                            "key": "market_address",
                                            "value": "New Market Address",
                                            "type": "text"
                                        },
                                        {
                                            "key": "market_lat",
                                            "value": "13.321",
                                            "type": "text"
                                        },
                                        {
                                            "key": "market_lon",
                                            "value": "122.31",
                                            "type": "text"
                                        }
                                    ]
                                },
                                "url": {
                                    "raw": "{{URL}}/merchants",
                                    "host": ["{{URL}}"],
                                    "path": ["merchants"]
                                }
                            },
                            "response": []
                        }
                    ]
                }
            ]
        },
        {
            "name": "cart",
            "item": [
                {
                    "name": "Add To Cart",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    body: pm.request.body\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "description": "JSON Type",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"qty\": 1,\r\n    \"id_merchant\": 3,\r\n    \"id_m_products\": 2\r\n}"
                        },
                        "url": {
                            "raw": "{{URL}}/carts",
                            "host": ["{{URL}}"],
                            "path": ["carts"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Cart List",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": []
                        },
                        "url": {
                            "raw": "{{URL}}/carts",
                            "host": ["{{URL}}"],
                            "path": ["carts"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Update Cart Qty",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    body: pm.request.body\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "description": "JSON Type",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"qty\": 1\r\n}"
                        },
                        "url": {
                            "raw": "{{URL}}/carts/:id",
                            "host": ["{{URL}}"],
                            "path": ["carts", ":id"],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "1",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Delete Cart Item",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "DELETE",
                        "header": [],
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": []
                        },
                        "url": {
                            "raw": "{{URL}}/carts/:id",
                            "host": ["{{URL}}"],
                            "path": ["carts", ":id"],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "1",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Checkout",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    body: pm.request.body\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "description": "JSON Type",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"price_total\": 1000\r\n}"
                        },
                        "url": {
                            "raw": "{{URL}}/carts/checkout",
                            "host": ["{{URL}}"],
                            "path": ["carts", "checkout"]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "transaction",
            "item": [
                {
                    "name": "Get All User Processed Transactions",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": []
                        },
                        "url": {
                            "raw": "{{URL}}/transactions",
                            "host": ["{{URL}}"],
                            "path": ["transactions"],
                            "query": [
                                {
                                    "key": "orderDirection",
                                    "value": "",
                                    "description": "Available values: ASC, DESC",
                                    "disabled": true
                                },
                                {
                                    "key": "orderBy",
                                    "value": "",
                                    "description": "Available Fields: created_at, full_name, phone_number, address",
                                    "disabled": true
                                },
                                {
                                    "key": "search",
                                    "value": "",
                                    "description": "Available Fields: full_name, phone_number, address",
                                    "disabled": true
                                },
                                {
                                    "key": "status",
                                    "value": "",
                                    "description": "Available values: 0, 1, 2, 3",
                                    "disabled": true
                                },
                                {
                                    "key": "page",
                                    "value": null,
                                    "description": "Available values: 0...n",
                                    "disabled": true
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Singe User Transactions",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": []
                        },
                        "url": {
                            "raw": "{{URL}}/transactions/:id",
                            "host": ["{{URL}}"],
                            "path": ["transactions", ":id"],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "1",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Finish Transaction",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": []
                        },
                        "url": {
                            "raw": "{{URL}}/transactions/:id",
                            "host": ["{{URL}}"],
                            "path": ["transactions", ":id"],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "1",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Review Transaction",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    body: pm.request.body\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "description": "JSON Type",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"rating\": 5,\r\n    \"review\": \"Mantap\"\r\n}"
                        },
                        "url": {
                            "raw": "{{URL}}/transactions/:id",
                            "host": ["{{URL}}"],
                            "path": ["transactions", ":id"],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "1",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "master",
            "item": [
                {
                    "name": "media",
                    "item": [
                        {
                            "name": "Add Media",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('test success', () => {\r",
                                            "    pm.expect(response.code).to.eql(200);\r",
                                            "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "    pm.expect(response.json().success).to.eql(true);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/form-data",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": [
                                        {
                                            "key": "image",
                                            "type": "file",
                                            "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29929.jpg"
                                        }
                                    ]
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/medias",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "medias"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Get All Media",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": []
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/medias",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "medias"],
                                    "query": [
                                        {
                                            "key": "orderDirection",
                                            "value": "",
                                            "description": "Available values: ASC, DESC",
                                            "disabled": true
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "",
                                            "description": "Available Fields: created_at, label",
                                            "disabled": true
                                        },
                                        {
                                            "key": "search",
                                            "value": "",
                                            "description": "Available Fields: label",
                                            "disabled": true
                                        },
                                        {
                                            "key": "page",
                                            "value": null,
                                            "description": "Available values: 0...n",
                                            "disabled": true
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Update Media",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('test success', () => {\r",
                                            "    pm.expect(response.code).to.eql(200);\r",
                                            "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "    pm.expect(response.json().success).to.eql(true);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/form-data",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": [
                                        {
                                            "key": "image",
                                            "type": "file",
                                            "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29929.jpg"
                                        }
                                    ]
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/medias/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "medias", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "4",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Delete Media",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "header": [],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": []
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/medias/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "medias", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "63",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "wallet",
                    "item": [
                        {
                            "name": "Get All Wallet",
                            "event": [
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                },
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": []
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/wallets",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "wallets"],
                                    "query": [
                                        {
                                            "key": "orderDirection",
                                            "value": "",
                                            "description": "Available values: ASC, DESC",
                                            "disabled": true
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "",
                                            "description": "Available Fields: created_at, wallet_name, wallet_description",
                                            "disabled": true
                                        },
                                        {
                                            "key": "search",
                                            "value": "",
                                            "description": "Available Fields: wallet_name, wallet_description",
                                            "disabled": true
                                        },
                                        {
                                            "key": "page",
                                            "value": null,
                                            "description": "Available values: 0...n",
                                            "disabled": true
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Add Wallet",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('test success', () => {\r",
                                            "    pm.expect(response.code).to.eql(200);\r",
                                            "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "    pm.expect(response.json().success).to.eql(true);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/form-data",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": [
                                        {
                                            "key": "logo",
                                            "type": "file",
                                            "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29929.jpg"
                                        },
                                        {
                                            "key": "wallet_name",
                                            "value": "test",
                                            "type": "text"
                                        },
                                        {
                                            "key": "wallet_description",
                                            "value": "test",
                                            "type": "text"
                                        }
                                    ]
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/wallets",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "wallets"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Update Wallet",
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json",
                                        "description": "JSON Type",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"wallet_name\": \"new wallet name\",\r\n    \"wallet_description\": \"new wallet description\",\r\n    \"is_visible\": 2\r\n}"
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/wallets/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "wallets", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "1",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Change Wallet Logo",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('test success', () => {\r",
                                            "    pm.expect(response.code).to.eql(200);\r",
                                            "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "    pm.expect(response.json().success).to.eql(true);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/form-data",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": [
                                        {
                                            "key": "logo",
                                            "type": "file",
                                            "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29929.jpg"
                                        }
                                    ]
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/wallets/:id/logo",
                                    "host": ["{{URL}}"],
                                    "path": [
                                        "masters",
                                        "wallets",
                                        ":id",
                                        "logo"
                                    ],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "3",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Delete Wallet",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": ""
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/wallets/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "wallets", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "3",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "bank",
                    "item": [
                        {
                            "name": "Add Bank",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('test success', () => {\r",
                                            "    pm.expect(response.code).to.eql(200);\r",
                                            "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "    pm.expect(response.json().success).to.eql(true);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/form-data",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": [
                                        {
                                            "key": "logo",
                                            "type": "file",
                                            "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29929.jpg"
                                        },
                                        {
                                            "key": "bank_name",
                                            "value": "test",
                                            "type": "text"
                                        }
                                    ]
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/banks",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "banks"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Get Bank Data",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": []
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/banks",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "banks"],
                                    "query": [
                                        {
                                            "key": "orderDirection",
                                            "value": "",
                                            "description": "Available values: ASC, DESC",
                                            "disabled": true
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "",
                                            "description": "Available Fields: created_at, bank_name",
                                            "disabled": true
                                        },
                                        {
                                            "key": "search",
                                            "value": "new bank name",
                                            "description": "Available Fields: bank_name",
                                            "disabled": true
                                        },
                                        {
                                            "key": "page",
                                            "value": null,
                                            "description": "Available values: 0...n",
                                            "disabled": true
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Update Bank Data",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString(),\r",
                                            "    body: pm.request.body\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json",
                                        "description": "JSON Type",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"bank_name\": \"new bank name\",\r\n    \"is_visible\": 2\r\n}"
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/banks/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "banks", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "2",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Delete Bank Data",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json",
                                        "description": "JSON Type",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"bank_name\": \"new bank name\",\r\n    \"is_visible\": 2\r\n}"
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/banks/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "banks", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "2",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Update Bank Data Logo",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('test success', () => {\r",
                                            "    pm.expect(response.code).to.eql(200);\r",
                                            "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "    pm.expect(response.json().success).to.eql(true);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/form-data",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": [
                                        {
                                            "key": "logo",
                                            "type": "file",
                                            "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29924.jpg"
                                        }
                                    ]
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/banks/:id/logo",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "banks", ":id", "logo"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "2",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Update Bank Data Detail",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString(),\r",
                                            "    body: pm.request.body\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json",
                                        "description": "JSON Type",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"account_number\": \"0123421421\",\r\n    \"account_name\": \"update name\"\r\n}"
                                },
                                "url": {
                                    "raw": "{{URL}}/api/v1/masters/banks/:id/detail",
                                    "host": ["{{URL}}"],
                                    "path": [
                                        "api",
                                        "v1",
                                        "masters",
                                        "banks",
                                        ":id",
                                        "detail"
                                    ],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "8",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Get Bank Data Detail",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": []
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/banks/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "banks", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "2",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Add Bank Data Step",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString(),\r",
                                            "    body: pm.request.body\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json",
                                        "description": "JSON Type",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"step\": \"test\"\r\n}"
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/banks/:id/steps",
                                    "host": ["{{URL}}"],
                                    "path": [
                                        "masters",
                                        "banks",
                                        ":id",
                                        "steps"
                                    ],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "8",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Delete Bank Data Step",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": ""
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/banks/steps/:id",
                                    "host": ["{{URL}}"],
                                    "path": [
                                        "masters",
                                        "banks",
                                        "steps",
                                        ":id"
                                    ],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "2",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "category",
                    "item": [
                        {
                            "name": "Get All Categories",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "GET",
                                "header": [],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": []
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/categories",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "categories"],
                                    "query": [
                                        {
                                            "key": "orderDirection",
                                            "value": "",
                                            "description": "Available values: ASC, DESC",
                                            "disabled": true
                                        },
                                        {
                                            "key": "orderBy",
                                            "value": "",
                                            "description": "Available Fields: created_at, category, description",
                                            "disabled": true
                                        },
                                        {
                                            "key": "search",
                                            "value": "",
                                            "description": "Available Fields: category, description",
                                            "disabled": true
                                        },
                                        {
                                            "key": "page",
                                            "value": null,
                                            "description": "Available values: 0...n",
                                            "disabled": true
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Add Category",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('test success', () => {\r",
                                            "    pm.expect(response.code).to.eql(200);\r",
                                            "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "    pm.expect(response.json().success).to.eql(true);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/form-data",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": [
                                        {
                                            "key": "icon",
                                            "type": "file",
                                            "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29929.jpg"
                                        },
                                        {
                                            "key": "category",
                                            "value": "test",
                                            "type": "text"
                                        },
                                        {
                                            "key": "slug",
                                            "value": "test",
                                            "type": "text"
                                        },
                                        {
                                            "key": "description",
                                            "value": "test",
                                            "type": "text"
                                        }
                                    ]
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/categories",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "categories"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Update Category",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString(),\r",
                                            "    body: pm.request.body\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json",
                                        "description": "JSON Type",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"category\": \"new category\",\r\n    \"slug\": \"new category slug\",\r\n    \"description\": \"new category description\",\r\n    \"is_visible\": 2\r\n}"
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/categories/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "categories", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "77",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Change Category Icon",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test('test success', () => {\r",
                                            "    pm.expect(response.code).to.eql(200);\r",
                                            "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "    pm.expect(response.json().success).to.eql(true);\r",
                                            "})"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "multipart/form-data",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "formdata",
                                    "formdata": [
                                        {
                                            "key": "icon",
                                            "type": "file",
                                            "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29929.jpg"
                                        }
                                    ]
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/categories/:id/icon",
                                    "host": ["{{URL}}"],
                                    "path": [
                                        "masters",
                                        "categories",
                                        ":id",
                                        "icon"
                                    ],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "3",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Delete Category",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": ""
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/categories/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "categories", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "3",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                },
                {
                    "name": "faq",
                    "item": [
                        {
                            "name": "Get All Master Faqs Data",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "noauth"
                                },
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{URL}}/masters/faqs",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "faqs"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Add Master Faq Data",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString(),\r",
                                            "    body: pm.request.body\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json",
                                        "description": "JSON Type",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"question\": \"Hai?\",\r\n    \"answer\": \"Hello\"\r\n}"
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/faqs",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "faqs"]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Update Master Faq Data",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString(),\r",
                                            "    body: pm.request.body\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json",
                                        "description": "JSON Type",
                                        "type": "text"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\r\n    \"question\": \"Hello?\",\r\n    \"answer\": \"Hi\"\r\n}"
                                },
                                "url": {
                                    "raw": "{{URL}}/masters/faqs/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "faqs", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "1",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Delete Master Faq Data",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "const { Request } = require('postman-collection')\r",
                                            "\r",
                                            "const sendRequestOne = new Request({\r",
                                            "    method: pm.request.method,\r",
                                            "    url: pm.request.url.toString()\r",
                                            "})\r",
                                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                            "    pm.test('test success', () => {\r",
                                            "        pm.expect(response.code).to.eql(200);\r",
                                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                            "        pm.expect(response.json().success).to.eql(true);\r",
                                            "    })\r",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "auth": {
                                    "type": "apikey",
                                    "apikey": [
                                        {
                                            "key": "value",
                                            "value": "{{TOKEN}}",
                                            "type": "string"
                                        },
                                        {
                                            "key": "key",
                                            "value": "authorization",
                                            "type": "string"
                                        },
                                        {
                                            "key": "in",
                                            "value": "header",
                                            "type": "string"
                                        }
                                    ]
                                },
                                "method": "DELETE",
                                "header": [],
                                "url": {
                                    "raw": "{{URL}}/masters/faqs/:id",
                                    "host": ["{{URL}}"],
                                    "path": ["masters", "faqs", ":id"],
                                    "variable": [
                                        {
                                            "key": "id",
                                            "value": "1",
                                            "type": "string"
                                        }
                                    ]
                                }
                            },
                            "response": []
                        }
                    ]
                }
            ]
        },
        {
            "name": "bank",
            "item": [
                {
                    "name": "Get All Bank Data",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "formdata",
                            "formdata": []
                        },
                        "url": {
                            "raw": "{{URL}}/banks",
                            "host": ["{{URL}}"],
                            "path": ["banks"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Single Bank Data",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "formdata",
                            "formdata": []
                        },
                        "url": {
                            "raw": "{{URL}}/banks/:id",
                            "host": ["{{URL}}"],
                            "path": ["banks", ":id"],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "2",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Add Bank User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    body: pm.request.body\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "description": "JSON Type",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"id_m_banks\": 1,\r\n    \"account_number\": \"49218470\",\r\n    \"account_name\": \"hfkdshflas\"\r\n}"
                        },
                        "url": {
                            "raw": "{{URL}}/banks/users",
                            "host": ["{{URL}}"],
                            "path": ["banks", "users"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get User Bank",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{URL}}/banks/users/get",
                            "host": ["{{URL}}"],
                            "path": ["banks", "users", "get"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Update Bank User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    body: pm.request.body,\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "description": "JSON Type",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"id_m_banks\": 1,\r\n    \"account_number\": \"49218470\",\r\n    \"account_name\": \"hfkdshflas\"\r\n}"
                        },
                        "url": {
                            "raw": "{{URL}}/banks/users/:id",
                            "host": ["{{URL}}"],
                            "path": ["banks", "users", ":id"],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "3",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Delete Bank User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "DELETE",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{URL}}/banks/users/:id",
                            "host": ["{{URL}}"],
                            "path": ["banks", "users", ":id"],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "3",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "wallet",
            "item": [
                {
                    "name": "Top Up",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    body: pm.request.body\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "description": "JSON Type",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"id_m_banks\": 1,\r\n    \"balance_request\": 43221,\r\n    \"balance_transfer\": 46382912\r\n}"
                        },
                        "url": {
                            "raw": "{{URL}}/wallets/top-up",
                            "host": ["{{URL}}"],
                            "path": ["wallets", "top-up"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Upload Proof of Top Up",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "\r",
                                    "pm.test('test success', () => {\r",
                                    "    pm.expect(response.code).to.eql(200);\r",
                                    "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "    pm.expect(response.json().success).to.eql(true);\r",
                                    "})"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "multipart/form-data",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "formdata",
                            "formdata": [
                                {
                                    "key": "image",
                                    "type": "file",
                                    "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29924.jpg"
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{URL}}/wallets/topup/:id/image",
                            "host": ["{{URL}}"],
                            "path": ["wallets", "topup", ":id", "image"],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "1",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Withdraw",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    body: pm.request.body\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "description": "JSON Type",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"id_u_user_bank_account\": 2,\r\n    \"balance_request\": 43221\r\n}"
                        },
                        "url": {
                            "raw": "{{URL}}/wallets/withdraw",
                            "host": ["{{URL}}"],
                            "path": ["wallets", "withdraw"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get User Wallet",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [""],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{URL}}/wallets",
                            "host": ["{{URL}}"],
                            "path": ["wallets"]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get User Top Up Histories",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{URL}}/wallets/topup/histories",
                            "host": ["{{URL}}"],
                            "path": ["wallets", "topup", "histories"],
                            "query": [
                                {
                                    "key": "orderDirection",
                                    "value": "",
                                    "description": "Available values: ASC, DESC",
                                    "disabled": true
                                },
                                {
                                    "key": "orderBy",
                                    "value": "",
                                    "description": "Available Fields: created_at, balance_request, balance_transfer",
                                    "disabled": true
                                },
                                {
                                    "key": "search",
                                    "value": "",
                                    "description": "Available Fields: balance_request, balance_transfer",
                                    "disabled": true
                                },
                                {
                                    "key": "page",
                                    "value": "",
                                    "description": "Available values: 1...n",
                                    "disabled": true
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get User Withdraw Histories",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{URL}}/wallets/withdraw/histories",
                            "host": ["{{URL}}"],
                            "path": ["wallets", "withdraw", "histories"],
                            "query": [
                                {
                                    "key": "orderDirection",
                                    "value": "",
                                    "description": "Available values: ASC, DESC",
                                    "disabled": true
                                },
                                {
                                    "key": "orderBy",
                                    "value": "",
                                    "description": "Available Fields: created_at, balance_request",
                                    "disabled": true
                                },
                                {
                                    "key": "search",
                                    "value": "",
                                    "description": "Available Fields: balance_request",
                                    "disabled": true
                                },
                                {
                                    "key": "page",
                                    "value": "",
                                    "description": "Available values: 1...n",
                                    "disabled": true
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Top Up Detail",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{URL}}/wallets/topup/:id",
                            "host": ["{{URL}}"],
                            "path": ["wallets", "topup", ":id"],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "1",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Withdraw Detail",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{URL}}/wallets/withdraw/:id",
                            "host": ["{{URL}}"],
                            "path": ["wallets", "withdraw", ":id"],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "1",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Update Withdraw Status",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    body: pm.request.body\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "description": "JSON Type",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"status\": 1\r\n}"
                        },
                        "url": {
                            "raw": "{{URL}}/wallets/withdraw/:id/status",
                            "host": ["{{URL}}"],
                            "path": ["wallets", "withdraw", ":id", "status"],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "6",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Update TopUp Status",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString(),\r",
                                    "    body: pm.request.body\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "description": "JSON Type",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"status\": 1\r\n}"
                        },
                        "url": {
                            "raw": "{{URL}}/wallets/topup/:id/status",
                            "host": ["{{URL}}"],
                            "path": ["wallets", "topup", ":id", "status"],
                            "variable": [
                                {
                                    "key": "id",
                                    "value": "2",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get All User Top Up",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{URL}}/wallets/topup/users/all",
                            "host": ["{{URL}}"],
                            "path": ["wallets", "topup", "users", "all"],
                            "query": [
                                {
                                    "key": "orderDirection",
                                    "value": "",
                                    "description": "Available values: ASC, DESC",
                                    "disabled": true
                                },
                                {
                                    "key": "orderBy",
                                    "value": "",
                                    "description": "Available Fields: created_at, balance_request, balance_transfer",
                                    "disabled": true
                                },
                                {
                                    "key": "search",
                                    "value": "",
                                    "description": "Available Fields: balance_request, balance_transfer",
                                    "disabled": true
                                },
                                {
                                    "key": "status",
                                    "value": "",
                                    "description": "Available values: 0, 1, 2",
                                    "disabled": true
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get All User Withdraw",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{URL}}/wallets/withdraw/users/all",
                            "host": ["{{URL}}"],
                            "path": ["wallets", "withdraw", "users", "all"],
                            "query": [
                                {
                                    "key": "orderDirection",
                                    "value": "",
                                    "description": "Available values: ASC, DESC",
                                    "disabled": true
                                },
                                {
                                    "key": "orderBy",
                                    "value": "",
                                    "description": "Available Fields: created_at, balance_request, balance_transfer",
                                    "disabled": true
                                },
                                {
                                    "key": "search",
                                    "value": "",
                                    "description": "Available Fields: balance_request, balance_transfer",
                                    "disabled": true
                                },
                                {
                                    "key": "status",
                                    "value": "",
                                    "description": "Available values: 0, 1, 2",
                                    "disabled": true
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "products",
            "item": [
                {
                    "name": "Get All Products",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{URL}}/products",
                            "host": ["{{URL}}"],
                            "path": ["products"],
                            "query": [
                                {
                                    "key": "search",
                                    "value": null,
                                    "description": "Available Fields: product_name, market_name, market_address",
                                    "disabled": true
                                },
                                {
                                    "key": "orderBy",
                                    "value": null,
                                    "description": "Available Fields: created_at,  product_name, market_name, market_address",
                                    "disabled": true
                                },
                                {
                                    "key": "orderDirection",
                                    "value": null,
                                    "description": "Available values: ASC, DESC",
                                    "disabled": true
                                },
                                {
                                    "key": "limit",
                                    "value": "",
                                    "description": "Available values: 0.....n",
                                    "disabled": true
                                },
                                {
                                    "key": "page",
                                    "value": "",
                                    "description": "Available values: 0...n",
                                    "disabled": true
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Products by Category",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "const { Request } = require('postman-collection')\r",
                                    "\r",
                                    "const sendRequestOne = new Request({\r",
                                    "    method: pm.request.method,\r",
                                    "    url: pm.request.url.toString()\r",
                                    "})\r",
                                    "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                                    "    pm.test('test success', () => {\r",
                                    "        pm.expect(response.code).to.eql(200);\r",
                                    "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                                    "        pm.expect(response.json().success).to.eql(true);\r",
                                    "    })\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "auth": {
                            "type": "apikey",
                            "apikey": [
                                {
                                    "key": "value",
                                    "value": "{{TOKEN}}",
                                    "type": "string"
                                },
                                {
                                    "key": "key",
                                    "value": "authorization",
                                    "type": "string"
                                },
                                {
                                    "key": "in",
                                    "value": "header",
                                    "type": "string"
                                }
                            ]
                        },
                        "method": "GET",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": ""
                        },
                        "url": {
                            "raw": "{{URL}}/products/categories/:categoryId",
                            "host": ["{{URL}}"],
                            "path": ["products", "categories", ":categoryId"],
                            "query": [
                                {
                                    "key": "limit",
                                    "value": "",
                                    "description": "Available values: 0...n",
                                    "disabled": true
                                },
                                {
                                    "key": "orderBy",
                                    "value": "",
                                    "description": "Available Fields: created_at,  product_name, market_name, market_address",
                                    "disabled": true
                                },
                                {
                                    "key": "orderDirection",
                                    "value": "",
                                    "description": "Available values: ASC, DESC",
                                    "disabled": true
                                },
                                {
                                    "key": "page",
                                    "value": "",
                                    "description": "Available values: 0...n",
                                    "disabled": true
                                }
                            ],
                            "variable": [
                                {
                                    "key": "categoryId",
                                    "value": "1",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Test Server",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "const { Request } = require('postman-collection')\r",
                            "\r",
                            "const sendRequestOne = new Request({\r",
                            "    method: pm.request.method,\r",
                            "    url: pm.request.url.toString()\r",
                            "})\r",
                            "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                            "    pm.test('test server is live', () => {\r",
                            "        pm.expect(response.code).to.eql(200);\r",
                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('text/plain; charset=utf-8');\r",
                            "        pm.expect(response.text()).to.eql('hello world');\r",
                            "    })\r",
                            "});\r",
                            "\r",
                            "const sendRequestTwo = new Request({\r",
                            "    method: pm.request.method,\r",
                            "    url: pm.environment.replaceIn(\"{{URL}}/not-exist\")\r",
                            "})\r",
                            "pm.sendRequest(sendRequestTwo, (_, response) => {\r",
                            "    pm.test('test url no exist', () => {\r",
                            "        pm.expect(response.code).to.eql(404);\r",
                            "        pm.expect(response.headers.toObject()['content-type']).to.eql('text/plain; charset=utf-8');\r",
                            "        pm.expect(response.text()).to.eql('hi');\r",
                            "    })\r",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{URL}}",
                    "host": ["{{URL}}"]
                }
            },
            "response": []
        }
    ]
}
