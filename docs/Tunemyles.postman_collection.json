{
  "info": {
    "_postman_id": "321038cc-53ab-4446-8ae3-3af834ceb176",
    "name": "Tunemyles",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "example",
      "item": [
        {
          "name": "GET Example",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get Success', () => {\r",
                  "        const { code, headers } = pm.response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(pm.response.json().success).to.eql(true);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{URL}}/example",
              "host": ["{{URL}}"],
              "path": ["example"]
            }
          },
          "response": []
        },
        {
          "name": "POST Example",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload) {\r",
                  "    return new Request({\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn(\"{{URL}}/example\"),\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "        },\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ name: 'name' }), (_, response) => {\r",
                  "    pm.test('Post Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(201);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                  "    pm.test('Post Fail, Validation Fail', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"name\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/example",
              "host": ["{{URL}}"],
              "path": ["example"]
            }
          },
          "response": []
        },
        {
          "name": "GET Single Example",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(id) {\r",
                  "    return new Request({\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/example/${id}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.replaceIn(`{{EXAMPLE_ID}}`)), (_, response) => {\r",
                  "    pm.test('Found Single Data', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(100), (_, response) => {\r",
                  "    pm.test('Data Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404)\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{URL}}/example/:{{EXAMPLE_ID}}",
              "host": ["{{URL}}"],
              "path": ["example", ":{{EXAMPLE_ID}}"],
              "variable": [
                {
                  "key": "{{EXAMPLE_ID}}",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "POST Example File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(formdata) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    console.log(formdata);\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/example/file'),\r",
                  "        body: {\r",
                  "            formdata,\r",
                  "            mode: 'formdata',\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.test('Post File Success', () => {\r",
                  "    const { code, headers } = pm.response;\r",
                  "\r",
                  "    pm.expect(code).to.eql(201);\r",
                  "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "    pm.expect(pm.response.json().success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest([{}]), (_, response) => {\r",
                  "    pm.test('Post File Fail, File Not Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        console.log(response);\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data",
                "description": "Multipart",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "Bliss.png"
                }
              ]
            },
            "url": {
              "raw": "{{URL}}/example/file",
              "host": ["{{URL}}"],
              "path": ["example", "file"]
            }
          },
          "response": []
        },
        {
          "name": "GET Private Example",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = token;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/example/private'),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest('1'), (_, response) => {\r",
                  "    pm.test('Get Private Data Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Get Private Data Fail, Header Key Not Given', () => {\r",
                  "        const { code, headers, json } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('2'), (_, response) => {\r",
                  "    pm.test('Get Private Data Fail, Wrong Header Key', () => {\r",
                  "        const { code, headers, json } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "1",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "authorization",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{URL}}/example/private",
              "host": ["{{URL}}"],
              "path": ["example", "private"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "auth",
      "item": [
        {
          "name": "Regiter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const usedPhoneNumber = Date.now().toString();\r",
                  "const usedUsername = Math.random().toString(36).substring(2);\r",
                  "const userPassword = 'password';\r",
                  "\r",
                  "pm.environment.set('USER_USERNAME', usedUsername);\r",
                  "pm.environment.set('USER_PASSWORD', userPassword);\r",
                  "pm.environment.set('USER_PHONE', usedPhoneNumber);\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload) {\r",
                  "    return new Request({\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/auth/register'),\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "        },\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const regPayload = function regPayload() {\r",
                  "    return {\r",
                  "        full_name: 'Name',\r",
                  "        username: usedUsername,\r",
                  "        password: userPassword,\r",
                  "        phone_number: usedPhoneNumber,\r",
                  "        address: 'address',\r",
                  "    };\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(regPayload()), (_, response) => {\r",
                  "    pm.test('Register Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "        const json = response.json()\r",
                  "        const token = json.data.token;\r",
                  "\r",
                  "        pm.environment.set('TOKEN', token);\r",
                  "\r",
                  "        pm.expect(code).to.eql(201);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(json.success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), phone_number: usedPhoneNumber }), (_, response) => {\r",
                  "    pm.test('Register Fail, Phone Number Already Exist', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(400);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), username: usedUsername }), (_, response) => {\r",
                  "    pm.test('Register Fail, Username Already Exist', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(400);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), full_name: '' }), (_, response) => {\r",
                  "    pm.test('Register Fail, Empty Name', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), address: '' }), (_, response) => {\r",
                  "    pm.test('Register Fail, Empty Address', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), full_name: 'x' }), (_, response) => {\r",
                  "    pm.test('Register Fail, Name too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), full_name: Array(257).toString() }), (_, response) => {\r",
                  "    pm.test('Register Fail, Name too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({\r",
                  "    ...regPayload(),\r",
                  "    username: Math.random().toString(36).substring(7),\r",
                  "}), (_, response) => {\r",
                  "    pm.test('Register Fail, Username too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), username: Array(22).toString() }), (_, response) => {\r",
                  "    pm.test('Register Fail, Username too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), phone_number: '1234' }), (_, response) => {\r",
                  "    pm.test('Register Fail, Phone Number too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), phone_number: '123456789012345' }), (_, response) => {\r",
                  "    pm.test('Register Fail, Phone Number too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), address: 'addr' }), (_, response) => {\r",
                  "    pm.test('Register Fail, Address too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), address: Array(1002).toString() }), (_, response) => {\r",
                  "    pm.test('Register Fail, Address too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                  "    pm.test('Register Fail, No Data Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"full_name\": \"Name\",\r\n    \"username\": \"username\",\r\n    \"password\": \"password\",\r\n    \"phone_number\": \"12345678931232\",\r\n    \"address\": \"address\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/auth/register",
              "host": ["{{URL}}"],
              "path": ["auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "[AVAILABLE IN TEST] Make User an Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " pm.test('User Success Become Admin', () => {\r",
                  "        const { code, headers } = pm.response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(pm.response.json().success).to.eql(true);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/auth/admin",
              "host": ["{{URL}}"],
              "path": ["auth", "admin"]
            }
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const username = pm.environment.replaceIn('{{USER_USERNAME}}');\r",
                  "const password = pm.environment.replaceIn('{{USER_PASSWORD}}');\r",
                  "const token = pm.response.json()?.data.token;\r",
                  "\r",
                  "pm.environment.set('TOKEN', token);\r",
                  "\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload) {\r",
                  "    return new Request({\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/auth/login'),\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "        },\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ username, password }), (_, response) => {\r",
                  "    pm.test('Login Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "        const json = response.json()\r",
                  "        const token = json.data.token;\r",
                  "\r",
                  "        pm.environment.set('TOKEN', token);\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(json.success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ username, password: \"wrong-password\" }), (_, response) => {\r",
                  "    pm.test('Login Fail, Wrong Password', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(400);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({\r",
                  "    username: 'no-user-here',\r",
                  "    password: 'wrong-password',\r",
                  "}), (_, response) => {\r",
                  "    pm.test('Login Fail, User Not Registered', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(400);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ password: 'wrong-password' }), (_, response) => {\r",
                  "    pm.test('Login Fail, No `username` Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ username: 'no-user-here' }), (_, response) => {\r",
                  "    pm.test('Login Fail, No `password` Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                  "    pm.test('Login Fail, No Data Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"username\",\r\n    \"password\": \"password\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/auth/login",
              "host": ["{{URL}}"],
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Get Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token = undefined) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/auth/me'),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                  "    pm.test('Get Profile Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Get Profile Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Get Profile Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/auth/me",
              "host": ["{{URL}}"],
              "path": ["auth", "me"]
            }
          },
          "response": []
        },
        {
          "name": "Update Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const reqBodyWithoutFile = pm.request.body.formdata.filter(({ type }) => type !== 'file');\r",
                  "\r",
                  "const makeRequest = function makeRequest(formdata, token = undefined) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'PATCH',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/auth/update-profile'),\r",
                  "        body: {\r",
                  "            formdata,\r",
                  "            mode: 'formdata',\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.test('Update Profile with Avatar Success', () => {\r",
                  "    const { code, headers } = pm.response;\r",
                  "\r",
                  "    pm.expect(code).to.eql(200);\r",
                  "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "    pm.expect(pm.response.json().success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    reqBodyWithoutFile,\r",
                  "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Update Profile without Avatar Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'full_name',\r",
                  "        value: 'x',\r",
                  "        type: 'text',\r",
                  "    }],\r",
                  "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Update Profile Fail, Name too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'full_name',\r",
                  "        value: Array(257).toString(),\r",
                  "        type: 'text'\r",
                  "    }],\r",
                  "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Update Profile Fail, Name too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'phone_number',\r",
                  "        value: '1234',\r",
                  "        type: 'text',\r",
                  "    }],\r",
                  "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Update Profile Fail, Phone Number too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'phone_number',\r",
                  "        value: '123456789012345',\r",
                  "        type: 'text'\r",
                  "    }],\r",
                  "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Update Profile Fail, Phone Number too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'address',\r",
                  "        value: 'addr',\r",
                  "        type: 'text',\r",
                  "    }],\r",
                  "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Update Profile Fail, Address too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'address',\r",
                  "        value: Array(1002).toString(),\r",
                  "        type: 'text',\r",
                  "    }],\r",
                  "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Update Profile Fail, Address too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'password',\r",
                  "        value: 'pass',\r",
                  "        type: 'text',\r",
                  "    }],\r",
                  "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Update Profile Fail, Password too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'password',\r",
                  "        value: Array(257).toString(),\r",
                  "        type: 'text',\r",
                  "    }],\r",
                  "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Update Profile Fail, Password too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBodyWithoutFile, 'this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Update Profile Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBodyWithoutFile), (_, response) => {\r",
                  "    pm.test('Update Profile Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": ["pm.environment.set(\"USER_PHONE\", Date.now());"],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data",
                "description": "Multipart",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "avatar",
                  "type": "file",
                  "src": "Bliss.png"
                },
                {
                  "key": "full_name",
                  "value": "New Name",
                  "type": "text"
                },
                {
                  "key": "address",
                  "value": "New Address",
                  "type": "text"
                },
                {
                  "key": "phone_number",
                  "value": "{{USER_PHONE}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "newpassword",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{URL}}/auth/update-profile",
              "host": ["{{URL}}"],
              "path": ["auth", "update-profile"]
            }
          },
          "response": []
        },
        {
          "name": "Forgot Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload) {\r",
                  "    return new Request({\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/auth/forgot-password'),\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "        },\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest({\r",
                  "    phone_number: pm.environment.replaceIn('{{USER_PHONE}}'),\r",
                  "}), (_, response) => {\r",
                  "    pm.test('Request Forgot Password Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(201);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ phone_number: '6991224220261' }), (_, response) => {\r",
                  "    pm.test('Request Forgot Password Fail, Number not Registered', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                  "    pm.test('Request Forgot Password Fail, No Data Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "description": "JSON Type",
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"phone_number\": \"12345678931232\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/auth/forgot-password",
              "host": ["{{URL}}"],
              "path": ["auth", "forgot-password"]
            }
          },
          "response": []
        },
        {
          "name": "Verify Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const makeRequest = function makeRequest(token = undefined) {\r",
                  "    const url = pm.environment.replaceIn(`{{URL}}/auth/verify-token/${token ? token : ''}`);\r",
                  "\r",
                  "    return new Request({\r",
                  "        url,\r",
                  "        method: 'GET',\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-token-not-exists'), (_, response) => {\r",
                  "    pm.test('Verify Forgot Password Token Fail, Token Invalid', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Verify Forgot Password Token Fail, No Token Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/auth/verify-token/:token",
              "host": ["{{URL}}"],
              "path": ["auth", "verify-token", ":token"],
              "variable": [
                {
                  "key": "token",
                  "value": "ffa62652d6eabbcc5d763494f456a5685b0e80e468f6b61e230cb56bb7e7c256"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload) {\r",
                  "    let url = pm.environment.replaceIn('{{URL}}/auth/reset-password');\r",
                  "\r",
                  "    return new Request({\r",
                  "        url,\r",
                  "        method: 'PATCH',\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "        },\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ token: 'this-token-not-exists', new_password: 'newpassword' }), (_, response) => {\r",
                  "    pm.test('Reset Password Fail, Token Invalid', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ new_password: 'newpassword' }), (_, response) => {\r",
                  "    pm.test('Reset Password Fail, No Token Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ token: 'this-token-not-exists' }), (_, response) => {\r",
                  "    pm.test('Reset Password Fail, No Data Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "description": "JSON Type",
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"token\": \"ffa62652d6eabbcc5d763494f456a5685b0e80e468f6b61e230cb56bb7e7c256\",\r\n    \"new_password\": \"newpassword\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/auth/reset-password",
              "host": ["{{URL}}"],
              "path": ["auth", "reset-password"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "master",
      "item": [
        {
          "name": "bank",
          "item": [
            {
              "name": "Add Master Bank",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const reqBodyWithoutFile = pm.request.body.formdata.filter(({ type }) => type !== 'file');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'POST',\r",
                      "        url: pm.environment.replaceIn('{{URL}}/masters/banks'),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Add Bank with Logo Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(201);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBodyWithoutFile,\r",
                      "    pm.environment.replaceIn('{{TOKEN}}')\r",
                      "), (_, response) => {\r",
                      "    pm.test('Add Bank without Logo Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(201);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Add Bank Fail, No Data Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBodyWithoutFile, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Add Bank Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBodyWithoutFile), (_, response) => {\r",
                      "    pm.test('Add Bank Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "logo",
                      "type": "file",
                      "src": "Bliss.png"
                    },
                    {
                      "key": "bank_name",
                      "value": "test",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/banks",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks"]
                }
              },
              "response": []
            },
            {
              "name": "Get Master Banks",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token, params = '') {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/banks${params}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Get Banks Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=ASC&orderBy=created_at&search=random&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Banks Success, with Query `orderDirection=ASC&orderBy=created_at&search=random&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=created_at&search=random&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Banks Success, with Query `orderDirection=DESC&orderBy=created_at&search=random&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=bank_name&search=random&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Banks Success, with Query `orderDirection=DESC&orderBy=bank_name&search=random&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=bank_name&search=random&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Banks Success, with Query `orderDirection=DESC&orderBy=bank_name&search=random&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=bank_name&search=&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Banks Success, with Query `orderDirection=DESC&orderBy=bank_name&search=&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=bank_name&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Banks Success, with Query `orderDirection=DESC&orderBy=bank_name&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESCs&orderBy=bank_name&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Banks Fail, with Query `orderDirection=DESCs&orderBy=bank_name&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=ASC&orderBy=bank_names&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Banks Fail, with Query `orderDirection=ASC&orderBy=bank_names&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=ASCs&orderBy=bank_names&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Banks Fail, with Query `orderDirection=ASCs&orderBy=bank_names&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Get Banks Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Get Banks Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "url": {
                  "raw": "{{URL}}/masters/banks",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks"],
                  "query": [
                    {
                      "key": "orderDirection",
                      "value": "",
                      "description": "Available values: ASC, DESC",
                      "disabled": true
                    },
                    {
                      "key": "orderBy",
                      "value": "",
                      "description": "Available Fields: created_at, bank_name",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Available Fields: bank_name",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "",
                      "description": "Available values: 0...n",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Master Bank Detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, bankId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    let url = pm.environment.replaceIn(`{{URL}}/masters/banks/${bankId}`);\r",
                      "\r",
                      "    return new Request({\r",
                      "        url,\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{BANK_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Bank Detail Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Get Bank Detail Fail, Bank Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Get Bank Detail Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Get Bank Detail Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "url": {
                  "raw": "{{URL}}/masters/banks/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "2",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Master Bank",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, bankId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    let url = pm.environment.replaceIn(`{{URL}}/masters/banks/${bankId}`);\r",
                      "\r",
                      "    return new Request({\r",
                      "        url,\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    {\r",
                      "        bank_name: 'new bank name',\r",
                      "        is_visible: 2,\r",
                      "    },\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{BANK_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Update Bank Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Update Bank Fail, Bank Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().sjjuccess).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Update Bank Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                      "    pm.test('Update Bank Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"bank_name\": \"new bank name\",\r\n    \"is_visible\": 2\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/masters/banks/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "2",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Master Bank Detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, bankId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    let url = pm.environment.replaceIn(`{{URL}}/masters/banks/${bankId}/detail`);\r",
                      "\r",
                      "    return new Request({\r",
                      "        url,\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    {\r",
                      "        account_number: \"0123421421\",\r",
                      "        account_name: \"update name\"\r",
                      "    },\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{BANK_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Update Bank Detail Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Update Bank Detail Fail, Bank Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Update Bank Detail Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                      "    pm.test('Update Bank Detail Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"account_number\": \"0123421421\",\r\n    \"account_name\": \"update name\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/api/v1/masters/banks/:id/detail",
                  "host": ["{{URL}}"],
                  "path": ["api", "v1", "masters", "banks", ":id", "detail"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "8",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Master Bank Logo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const reqBodyWithFile = pm.request.body.formdata;\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined, bankId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/banks/${bankId}`),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBodyWithFile,\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{BANK_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Change Bank Logo Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBodyWithFile,\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Change Bank Logo Fail, Bank Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    [{}], \r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{MEDIA_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Change Bank Logo Fail, No `image` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBodyWithFile,\r",
                      "    'this-is-wrong',\r",
                      "    pm.environment.replaceIn('{{MEDIA_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Change Bank Logo Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBodyWithFile), (_, response) => {\r",
                      "    pm.test('Change Bank Logo Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "logo",
                      "type": "file",
                      "src": "Bliss.png"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/banks/:id/logo",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks", ":id", "logo"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "2",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Add Master Bank Step",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const reqBody = { step: 'test' };\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, bankId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'POST',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/banks/${bankId}/steps`),\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBody,\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{BANK_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Add Bank Step Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(201);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Add Bank Step Fail, No Data Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Add Bank Step Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                      "    pm.test('Add Bank Step Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"step\": \"test\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/masters/banks/:id/steps",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks", ":id", "steps"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "8",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Master Bank Step",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, bankStepId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'DELETE',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/banks/steps/${bankStepId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{BANK_STEP_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Delete Bank Step Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Delete Bank Step Fail, Bank Step Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Delete Bank Step Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Delete Bank Step Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/masters/banks/steps/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks", "steps", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "2",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Master Bank",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, bankId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'DELETE',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/banks/${bankId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{BANK_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Delete Bank Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Delete Bank Fail, Bank Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Delete Bank Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Delete Bank Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"bank_name\": \"new bank name\",\r\n    \"is_visible\": 2\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/masters/banks/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "2",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "category",
          "item": [
            {
              "name": "Add Category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const reqBodyWithFile = pm.request.body.formdata;\r",
                      "const reqBotyWithoutFile = reqBodyWithFile.filter(({ type }) => type !== 'file');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'POST',\r",
                      "        url: pm.environment.replaceIn('{{URL}}/masters/categories'),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Add Category with Icon Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(201);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBotyWithoutFile,\r",
                      "    pm.environment.replaceIn('{{TOKEN}}')\r",
                      "), (_, response) => {\r",
                      "    pm.test('Add Category without Icon Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(201);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Add Category Fail, No Data Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBotyWithoutFile, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Add Category Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBotyWithoutFile), (_, response) => {\r",
                      "    pm.test('Add Category Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "icon",
                      "type": "file",
                      "src": "Bliss.png"
                    },
                    {
                      "key": "category",
                      "value": "test",
                      "type": "text"
                    },
                    {
                      "key": "slug",
                      "value": "test",
                      "type": "text"
                    },
                    {
                      "key": "description",
                      "value": "test",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/categories",
                  "host": ["{{URL}}"],
                  "path": ["masters", "categories"]
                }
              },
              "response": []
            },
            {
              "name": "Get Categories",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token, params = '') {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/categories${params}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Get Categories Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=ASC&orderBy=created_at&search=random&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Categories Success, with Query `orderDirection=ASC&orderBy=created_at&search=random&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=created_at&search=random&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Categories Success, with Query `orderDirection=DESC&orderBy=created_at&search=random&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=category&search=random&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Categories Success, with Query `orderDirection=DESC&orderBy=category&search=random&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=category&search=random&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Categories Success, with Query `orderDirection=DESC&orderBy=category&search=random&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=category&search=&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Categories Success, with Query `orderDirection=DESC&orderBy=category&search=&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=category&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Categories Success, with Query `orderDirection=DESC&orderBy=category&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=description&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Categories Success, with Query `orderDirection=DESC&orderBy=description&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESCs&orderBy=category&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Categories Fail, with Query `orderDirection=DESCs&orderBy=category&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=ASC&orderBy=categories&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Categories Fail, with Query `orderDirection=ASC&orderBy=categories&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=ASCs&orderBy=categories&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Categories Fail, with Query `orderDirection=ASCs&orderBy=categories&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Get Categories Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Get Categories Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "url": {
                  "raw": "{{URL}}/masters/categories",
                  "host": ["{{URL}}"],
                  "path": ["masters", "categories"],
                  "query": [
                    {
                      "key": "orderDirection",
                      "value": "",
                      "description": "Available values: ASC, DESC",
                      "disabled": true
                    },
                    {
                      "key": "orderBy",
                      "value": "",
                      "description": "Available Fields: created_at, category, description",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Available Fields: category, description",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": null,
                      "description": "Available values: 0...n",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, categoryId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    let url = pm.environment.replaceIn(`{{URL}}/masters/categories/${categoryId}`);\r",
                      "\r",
                      "    return new Request({\r",
                      "        url,\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    {\r",
                      "        category: 'new category',\r",
                      "        slug: 'new category slug',\r",
                      "        description: 'new category description',\r",
                      "        is_visible: 2,\r",
                      "    },\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{CATEGORY_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Update Category Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Update Category Fail, Category Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Update Category Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                      "    pm.test('Update Category Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"category\": \"new category\",\r\n    \"slug\": \"new category slug\",\r\n    \"description\": \"new category description\",\r\n    \"is_visible\": 2\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/masters/categories/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "categories", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "77",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Change Category Icon",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const reqBodyWithFile = pm.request.body.formdata;\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined, categoryId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/categories/${categoryId}/icon`),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBodyWithFile,\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{CATEGORY_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Update Category Icon Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBodyWithFile,\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Update Category Icon, Category Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Update Category Icon Fail, No Data Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBodyWithFile, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Update Category Icon Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBodyWithFile), (_, response) => {\r",
                      "    pm.test('Update Category Icon Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "icon",
                      "type": "file",
                      "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29929.jpg"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/categories/:id/icon",
                  "host": ["{{URL}}"],
                  "path": ["masters", "categories", ":id", "icon"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "3",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, categoryId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'DELETE',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/categories/${categoryId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{CATEGORY_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Delete Category Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Delete Category Fail, Category Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Delete Category Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(null, pm.environment.replaceIn('{{CATEGORY_ID}}')), (_, response) => {\r",
                      "    pm.test('Delete Category Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/masters/categories/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "categories", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "3",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "media",
          "item": [
            {
              "name": "Add Media",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'POST',\r",
                      "        url: pm.environment.replaceIn('{{URL}}/masters/medias'),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Add Media Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(201);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}]), (_, response) => {\r",
                      "    pm.test('Add Media Fail, No `image` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "image",
                      "type": "file",
                      "src": "Bliss.png"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/medias",
                  "host": ["{{URL}}"],
                  "path": ["masters", "medias"]
                }
              },
              "response": []
            },
            {
              "name": "Get Medias",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token, params = '') {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/medias${params}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Get Medias Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=ASC&orderBy=created_at&search=random&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Medias Success, with Query `orderDirection=ASC&orderBy=created_at&search=random&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=created_at&search=random&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Medias Success, with Query `orderDirection=DESC&orderBy=created_at&search=random&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=label&search=random&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Medias Success, with Query `orderDirection=DESC&orderBy=label&search=random&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=label&search=random&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Medias Success, with Query `orderDirection=DESC&orderBy=label&search=random&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=label&search=&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Medias Success, with Query `orderDirection=DESC&orderBy=label&search=&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=label&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Medias Success, with Query `orderDirection=DESC&orderBy=label&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESCs&orderBy=label&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Medias Fail, with Query `orderDirection=DESCs&orderBy=label&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=ASC&orderBy=labels&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Medias Fail, with Query `orderDirection=ASC&orderBy=labels&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=ASCs&orderBy=labels&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Medias Fail, with Query `orderDirection=ASCs&orderBy=labels&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Get Medias Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Get Medias Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "url": {
                  "raw": "{{URL}}/masters/medias",
                  "host": ["{{URL}}"],
                  "path": ["masters", "medias"],
                  "query": [
                    {
                      "key": "orderDirection",
                      "value": "",
                      "description": "Available values: ASC, DESC",
                      "disabled": true
                    },
                    {
                      "key": "orderBy",
                      "value": "",
                      "description": "Available Fields: created_at, label",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Available Fields: label",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": null,
                      "description": "Available values: 0...n",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Media",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined, mediaId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/medias/${mediaId}`),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Update Media Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(200);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.replaceIn('{{MEDIA_ID}}')), (_, response) => {\r",
                      "    pm.test('Update Media Fail, No `image` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "image",
                      "type": "file",
                      "src": "Bliss.png"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/medias/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "medias", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "4",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Media",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, mediaId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'DELETE',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/medias/${mediaId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{MEDIA_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Delete Media Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Delete Media Fail, Image Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Delete Media Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Delete Media Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "url": {
                  "raw": "{{URL}}/masters/medias/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "medias", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "63",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "wallet",
          "item": [
            {
              "name": "Add Wallet",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const reqBodyWithFile = pm.request.body.formdata;\r",
                      "const reqBotyWithoutFile = reqBodyWithFile.filter(({ type }) => type !== 'file');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'POST',\r",
                      "        url: pm.environment.replaceIn('{{URL}}/masters/wallets'),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Add Wallet with Image Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(201);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBotyWithoutFile,\r",
                      "    pm.environment.replaceIn('{{TOKEN}}')\r",
                      "), (_, response) => {\r",
                      "    pm.test('Add Wallet without Image Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(201);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    [{}],\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Add Wallet Fail, No Data Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBotyWithoutFile,\r",
                      "    'this-is-wrong',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Add Wallet Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBotyWithoutFile), (_, response) => {\r",
                      "    pm.test('Add Wallet Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
                    "key": "Content-Type",
                    "value": "multipart/form-data",
                    "description": "Multipart",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "logo",
                      "type": "file",
                      "src": "Bliss.png"
                    },
                    {
                      "key": "wallet_name",
                      "value": "test",
                      "type": "text"
                    },
                    {
                      "key": "wallet_description",
                      "value": "test",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/wallets",
                  "host": ["{{URL}}"],
                  "path": ["masters", "wallets"]
                }
              },
              "response": []
            },
            {
              "name": "Get All Wallet",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token, params = '') {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/wallets${params}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Get Wallets Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=ASC&orderBy=created_at&search=random&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Wallets Success, with Query `orderDirection=ASC&orderBy=created_at&search=random&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=created_at&search=random&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Wallets Success, with Query `orderDirection=DESC&orderBy=created_at&search=random&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=wallet_name&search=random&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Wallets Success, with Query `orderDirection=DESC&orderBy=wallet_name&search=random&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=wallet_name&search=random&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Wallets Success, with Query `orderDirection=DESC&orderBy=wallet_name&search=random&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=wallet_name&search=&page=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Wallets Success, with Query `orderDirection=DESC&orderBy=wallet_name&search=&page=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESC&orderBy=wallet_name&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Wallets Success, with Query `orderDirection=DESC&orderBy=wallet_name&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=ASC&orderBy=wallet_description&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Wallets Success, with Query `orderDirection=ASC&orderBy=wallet_description&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=DESCs&orderBy=wallet_name&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Wallets Fail, with Query `orderDirection=DESCs&orderBy=wallet_name&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=ASC&orderBy=wallet_names&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Wallets Fail, with Query `orderDirection=ASC&orderBy=wallet_names&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?orderDirection=ASCs&orderBy=wallet_names&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Get Wallets Fail, with Query `orderDirection=ASCs&orderBy=wallet_names&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Get Wallets Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Get Wallets Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "url": {
                  "raw": "{{URL}}/masters/wallets",
                  "host": ["{{URL}}"],
                  "path": ["masters", "wallets"],
                  "query": [
                    {
                      "key": "orderDirection",
                      "value": "",
                      "description": "Available values: ASC, DESC",
                      "disabled": true
                    },
                    {
                      "key": "orderBy",
                      "value": "",
                      "description": "Available Fields: created_at, wallet_name, wallet_description",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Available Fields: wallet_name, wallet_description",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": null,
                      "description": "Available values: 0...n",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Wallet",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, walletId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    let url = pm.environment.replaceIn(`{{URL}}/masters/wallets/${walletId}`);\r",
                      "\r",
                      "    return new Request({\r",
                      "        url,\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    {\r",
                      "        wallet_name: 'new wallet name',\r",
                      "        wallet_description: 'new wallet description',\r",
                      "        is_visible: 2,\r",
                      "    },\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{WALLET_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Update Wallet Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Update Wallet Fail, Wallet Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Update Wallet Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                      "    pm.test('Update Wallet Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "authorization",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"wallet_name\": \"new wallet name\",\r\n    \"wallet_description\": \"new wallet description\",\r\n    \"is_visible\": 2\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/masters/wallets/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "wallets", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Change Wallet Logo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const reqBodyWithFile = pm.request.body.formdata;\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined, walletId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/wallets/${walletId}/logo`),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Update Wallet Logo Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(200);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Update Wallet Logo Fail, No Data Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "logo",
                      "type": "file",
                      "src": "Bliss.png"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/wallets/:id/logo",
                  "host": ["{{URL}}"],
                  "path": ["masters", "wallets", ":id", "logo"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "3",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Wallet",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, walletId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'DELETE',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/categories/${walletId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{WALLET_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Delete Wallet Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Delete Wallet Fail, Wallet Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Delete Wallet Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(null, pm.environment.replaceIn('{{WALLET_ID}}')), (_, response) => {\r",
                      "    pm.test('Delete Wallet Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/masters/wallets/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "wallets", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "3",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "faq",
          "item": [
            {
              "name": "Add Faq",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const reqBody = {\r",
                      "    question: 'Hai?',\r",
                      "    answer: 'Hello',\r",
                      "};\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    let url = pm.environment.replaceIn(`{{URL}}/masters/faqs`);\r",
                      "\r",
                      "    return new Request({\r",
                      "        url,\r",
                      "        header,\r",
                      "        method: 'POST',\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBody,\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Add Faq Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(201);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBody,\r",
                      "    'this-is-wrong',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Add Faq Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                      "    pm.test('Add Faq Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"question\": \"Hai?\",\r\n    \"answer\": \"Hello\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/masters/faqs",
                  "host": ["{{URL}}"],
                  "path": ["masters", "faqs"]
                }
              },
              "response": []
            },
            {
              "name": "Get Faqs",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Get Faqs Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(200);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{URL}}/masters/faqs",
                  "host": ["{{URL}}"],
                  "path": ["masters", "faqs"]
                }
              },
              "response": []
            },
            {
              "name": "Update Faq",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, faqId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    let url = pm.environment.replaceIn(`{{URL}}/masters/faqs/${faqId}`);\r",
                      "\r",
                      "    return new Request({\r",
                      "        url,\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    {\r",
                      "        question: 'Hai?',\r",
                      "        answer: 'Hello',\r",
                      "    },\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{FAQ_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Update Faq Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Update Faq Fail, Faq Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Update Faq Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                      "    pm.test('Update Faq Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"question\": \"Hello?\",\r\n    \"answer\": \"Hi\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/masters/faqs/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "faqs", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Faq",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, faqId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'DELETE',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/categories/${faqId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    pm.environment.replaceIn('{{FAQ_ID}}'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Delete Faq Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Delete Faq Fail, Faq Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Delete Faq Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(null, pm.environment.replaceIn('{{FAQ_ID}}')), (_, response) => {\r",
                      "    pm.test('Delete Faq Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{URL}}/masters/faqs/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "faqs", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "merchant",
      "item": [
        {
          "name": "profile",
          "item": [
            {
              "name": "Activate Merchant",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('test success', () => {\r",
                      "    pm.expect(response.code).to.eql(200);\r",
                      "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(response.json().success).to.eql(true);\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "no_identity",
                      "value": "432871024147219",
                      "type": "text"
                    },
                    {
                      "key": "identity_photo",
                      "type": "file",
                      "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29929.jpg"
                    },
                    {
                      "key": "market_photo",
                      "type": "file",
                      "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29924.jpg"
                    },
                    {
                      "key": "market_name",
                      "value": "name",
                      "type": "text"
                    },
                    {
                      "key": "market_address",
                      "value": "address",
                      "type": "text"
                    },
                    {
                      "key": "market_lat",
                      "value": "-6.213131231",
                      "type": "text"
                    },
                    {
                      "key": "market_lon",
                      "value": "-6.213131231",
                      "type": "text"
                    },
                    {
                      "key": "market_close_time",
                      "value": "21:00",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/merchants/activate",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "activate"]
                }
              },
              "response": []
            },
            {
              "name": "Update Merchant Profile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('test success', () => {\r",
                      "    pm.expect(response.code).to.eql(200);\r",
                      "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(response.json().success).to.eql(true);\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "market_photo",
                      "type": "file",
                      "src": "/C:/Users/ACER/Desktop/Wallpaper/luca-bravo-VowIFDxogG4-unsplash.jpg"
                    },
                    {
                      "key": "no_identity",
                      "value": "34212421414",
                      "type": "text"
                    },
                    {
                      "key": "market_name",
                      "value": "New Market Name",
                      "type": "text"
                    },
                    {
                      "key": "market_address",
                      "value": "New Market Address",
                      "type": "text"
                    },
                    {
                      "key": "market_lat",
                      "value": "13.321",
                      "type": "text"
                    },
                    {
                      "key": "market_lon",
                      "value": "122.31",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/merchants",
                  "host": ["{{URL}}"],
                  "path": ["merchants"]
                }
              },
              "response": []
            },
            {
              "name": "Update Merchant Close Time",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString(),\r",
                      "    body: pm.request.body\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"market_close_time\": \"22:00\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/merchants/operation-time",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "operation-time"]
                }
              },
              "response": []
            },
            {
              "name": "Get Merchant Profile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString()\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants",
                  "host": ["{{URL}}"],
                  "path": ["merchants"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "product",
          "item": [
            {
              "name": "Add Product",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('test success', () => {\r",
                      "    pm.expect(response.code).to.eql(200);\r",
                      "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(response.json().success).to.eql(true);\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "product_name",
                      "value": "name",
                      "type": "text"
                    },
                    {
                      "key": "description",
                      "value": "description",
                      "type": "text"
                    },
                    {
                      "key": "cover",
                      "type": "file",
                      "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29924.jpg"
                    },
                    {
                      "key": "price_default",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "price_selling",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "qty",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "discount",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "is_visible",
                      "value": "1",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/merchants/products",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products"]
                }
              },
              "response": []
            },
            {
              "name": "Get Products",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString()\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/products",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products"],
                  "query": [
                    {
                      "key": "orderDirection",
                      "value": "",
                      "description": "Available values: ASC, DESC",
                      "disabled": true
                    },
                    {
                      "key": "orderBy",
                      "value": "",
                      "description": "Available Fields: created_at,  product_name, market_name, market_address",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Available Fields: product_name, market_name, market_address",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": null,
                      "description": "Available values: 0...n",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Product",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString(),\r",
                      "    body: pm.request.body\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "description": "JSON Type",
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"product_name\": \"new name\",\r\n    \"description\": \"new descs\",\r\n    \"price_default\": 2,\r\n    \"price_selling\": 2,\r\n    \"qty\": 2,\r\n    \"discount\": 2,\r\n    \"is_visible\": 2\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:id",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Product Cover",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('test success', () => {\r",
                      "    pm.expect(response.code).to.eql(200);\r",
                      "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(response.json().success).to.eql(true);\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "cover",
                      "type": "file",
                      "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29924.jpg"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:id/cover",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":id", "cover"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Product Status",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString(),\r",
                      "    body: pm.request.body\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"is_visible\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:id/status",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":id", "status"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Bind Product Category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString(),\r",
                      "    body: pm.request.body\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id_category\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:id/categories",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":id", "categories"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Product Detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString()\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:id",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Add Product Image",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('test success', () => {\r",
                      "    pm.expect(response.code).to.eql(200);\r",
                      "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(response.json().success).to.eql(true);\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "image",
                      "type": "file",
                      "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29924.jpg"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:id/image",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":id", "image"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Product Category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString()\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:productId/categories/:categoryId",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":productId", "categories", ":categoryId"],
                  "variable": [
                    {
                      "key": "productId",
                      "value": "1",
                      "type": "string"
                    },
                    {
                      "key": "categoryId",
                      "value": "69",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Product Image",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString()\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/image/:id",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", "image", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Product",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString()\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:id",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "order",
          "item": [
            {
              "name": "Get Orders",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString()\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/orders",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "orders"],
                  "query": [
                    {
                      "key": "orderDirection",
                      "value": "",
                      "description": "Available values: ASC, DESC",
                      "disabled": true
                    },
                    {
                      "key": "orderBy",
                      "value": "",
                      "description": "Available Fields: created_at,  full_name, phone_number, address",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Available Fields: full_name, phone_number, address",
                      "disabled": true
                    },
                    {
                      "key": "status",
                      "value": "",
                      "description": "Available values: 0, 1, 2",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": null,
                      "description": "Available values: 1, 2, ....",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Order Detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString()\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/orders/:id",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "orders", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Order Status",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString(),\r",
                      "    body: pm.request.body\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"status\": 2\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/merchants/orders/:id",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "orders", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "merchant list",
          "item": [
            {
              "name": "Get Merchant List",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString()\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/list",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "list"],
                  "query": [
                    {
                      "key": "orderDirection",
                      "value": "",
                      "description": "Available values: ASC, DESC",
                      "disabled": true
                    },
                    {
                      "key": "orderBy",
                      "value": "",
                      "description": "Available Fields: created_at,  full_name, phone_number, market_name, market_address",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Available Fields: full_name, phone_number, market_name, market_address",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": null,
                      "description": "Available values: 0...n",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Merchant Product List",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString()\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/list/:id",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "list", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Random Merchants",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString()\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/random",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "random"],
                  "query": [
                    {
                      "key": "limit",
                      "value": "",
                      "description": "Available values: 0...n",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "transaction",
          "item": [
            {
              "name": "Get Merchant Transaction Histories",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString()\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/transactions",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "transactions"],
                  "query": [
                    {
                      "key": "date",
                      "value": "",
                      "description": "Available values: year-month-date",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Merchant Incomes",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const sendRequestOne = new Request({\r",
                      "    method: pm.request.method,\r",
                      "    url: pm.request.url.toString()\r",
                      "})\r",
                      "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                      "    pm.test('test success', () => {\r",
                      "        pm.expect(response.code).to.eql(200);\r",
                      "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/incomes",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "incomes"],
                  "query": [
                    {
                      "key": "year",
                      "value": "",
                      "description": "Available values: year",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "products",
      "item": [
        {
          "name": "Get Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/products",
              "host": ["{{URL}}"],
              "path": ["products"],
              "query": [
                {
                  "key": "search",
                  "value": null,
                  "description": "Available Fields: product_name, market_name, market_address",
                  "disabled": true
                },
                {
                  "key": "orderBy",
                  "value": null,
                  "description": "Available Fields: created_at,  product_name, market_name, market_address",
                  "disabled": true
                },
                {
                  "key": "orderDirection",
                  "value": null,
                  "description": "Available values: ASC, DESC",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Available values: 0.....n",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Available values: 0...n",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Products by Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/products/categories/:categoryId",
              "host": ["{{URL}}"],
              "path": ["products", "categories", ":categoryId"],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "Available values: 0...n",
                  "disabled": true
                },
                {
                  "key": "orderBy",
                  "value": "",
                  "description": "Available Fields: created_at,  product_name, market_name, market_address",
                  "disabled": true
                },
                {
                  "key": "orderDirection",
                  "value": "",
                  "description": "Available values: ASC, DESC",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Available values: 0...n",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "categoryId",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "cart",
      "item": [
        {
          "name": "Add Item to Cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString(),\r",
                  "    body: pm.request.body\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"qty\": 1,\r\n    \"id_merchant\": 3,\r\n    \"id_m_products\": 2\r\n}"
            },
            "url": {
              "raw": "{{URL}}/carts",
              "host": ["{{URL}}"],
              "path": ["carts"]
            }
          },
          "response": []
        },
        {
          "name": "Get Cart Items",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": []
            },
            "url": {
              "raw": "{{URL}}/carts",
              "host": ["{{URL}}"],
              "path": ["carts"]
            }
          },
          "response": []
        },
        {
          "name": "Update Cart Item Qty",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString(),\r",
                  "    body: pm.request.body\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"qty\": 1\r\n}"
            },
            "url": {
              "raw": "{{URL}}/carts/:id",
              "host": ["{{URL}}"],
              "path": ["carts", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Cart Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": []
            },
            "url": {
              "raw": "{{URL}}/carts/:id",
              "host": ["{{URL}}"],
              "path": ["carts", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Checkout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString(),\r",
                  "    body: pm.request.body\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"price_total\": 1000\r\n}"
            },
            "url": {
              "raw": "{{URL}}/carts/checkout",
              "host": ["{{URL}}"],
              "path": ["carts", "checkout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "transaction",
      "item": [
        {
          "name": "Get User Processed Transactions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": []
            },
            "url": {
              "raw": "{{URL}}/transactions",
              "host": ["{{URL}}"],
              "path": ["transactions"],
              "query": [
                {
                  "key": "orderDirection",
                  "value": "",
                  "description": "Available values: ASC, DESC",
                  "disabled": true
                },
                {
                  "key": "orderBy",
                  "value": "",
                  "description": "Available Fields: created_at, full_name, phone_number, address",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Available Fields: full_name, phone_number, address",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Available values: 0, 1, 2, 3",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": null,
                  "description": "Available values: 0...n",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Transaction Detail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": []
            },
            "url": {
              "raw": "{{URL}}/transactions/:id",
              "host": ["{{URL}}"],
              "path": ["transactions", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Finish Transaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": []
            },
            "url": {
              "raw": "{{URL}}/transactions/:id",
              "host": ["{{URL}}"],
              "path": ["transactions", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Review Transaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString(),\r",
                  "    body: pm.request.body\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"rating\": 5,\r\n    \"review\": \"Mantap\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/transactions/:id",
              "host": ["{{URL}}"],
              "path": ["transactions", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "bank",
      "item": [
        {
          "name": "Add Bank User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString(),\r",
                  "    body: pm.request.body\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id_m_banks\": 1,\r\n    \"account_number\": \"49218470\",\r\n    \"account_name\": \"hfkdshflas\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/banks/users",
              "host": ["{{URL}}"],
              "path": ["banks", "users"]
            }
          },
          "response": []
        },
        {
          "name": "Get Banks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": []
            },
            "url": {
              "raw": "{{URL}}/banks",
              "host": ["{{URL}}"],
              "path": ["banks"]
            }
          },
          "response": []
        },
        {
          "name": "Get Bank Detail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": []
            },
            "url": {
              "raw": "{{URL}}/banks/:id",
              "host": ["{{URL}}"],
              "path": ["banks", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Bank Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/banks/users/get",
              "host": ["{{URL}}"],
              "path": ["banks", "users", "get"]
            }
          },
          "response": []
        },
        {
          "name": "Update Bank User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString(),\r",
                  "    body: pm.request.body,\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id_m_banks\": 1,\r\n    \"account_number\": \"49218470\",\r\n    \"account_name\": \"hfkdshflas\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/banks/users/:id",
              "host": ["{{URL}}"],
              "path": ["banks", "users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "3",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Bank User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/banks/users/:id",
              "host": ["{{URL}}"],
              "path": ["banks", "users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "3",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "wallet",
      "item": [
        {
          "name": "Top Up",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString(),\r",
                  "    body: pm.request.body\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id_m_banks\": 1,\r\n    \"balance_request\": 43221,\r\n    \"balance_transfer\": 46382912\r\n}"
            },
            "url": {
              "raw": "{{URL}}/wallets/top-up",
              "host": ["{{URL}}"],
              "path": ["wallets", "top-up"]
            }
          },
          "response": []
        },
        {
          "name": "Withdraw",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString(),\r",
                  "    body: pm.request.body\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id_u_user_bank_account\": 2,\r\n    \"balance_request\": 43221\r\n}"
            },
            "url": {
              "raw": "{{URL}}/wallets/withdraw",
              "host": ["{{URL}}"],
              "path": ["wallets", "withdraw"]
            }
          },
          "response": []
        },
        {
          "name": "Get User Wallets",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/wallets",
              "host": ["{{URL}}"],
              "path": ["wallets"]
            }
          },
          "response": []
        },
        {
          "name": "Get User Top Up Histories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/wallets/topup/histories",
              "host": ["{{URL}}"],
              "path": ["wallets", "topup", "histories"],
              "query": [
                {
                  "key": "orderDirection",
                  "value": "",
                  "description": "Available values: ASC, DESC",
                  "disabled": true
                },
                {
                  "key": "orderBy",
                  "value": "",
                  "description": "Available Fields: created_at, balance_request, balance_transfer",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Available Fields: balance_request, balance_transfer",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Available values: 1...n",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Withdraw Histories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/wallets/withdraw/histories",
              "host": ["{{URL}}"],
              "path": ["wallets", "withdraw", "histories"],
              "query": [
                {
                  "key": "orderDirection",
                  "value": "",
                  "description": "Available values: ASC, DESC",
                  "disabled": true
                },
                {
                  "key": "orderBy",
                  "value": "",
                  "description": "Available Fields: created_at, balance_request",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Available Fields: balance_request",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Available values: 1...n",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Top Up Detail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/wallets/topup/:id",
              "host": ["{{URL}}"],
              "path": ["wallets", "topup", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Withdraw Detail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/wallets/withdraw/:id",
              "host": ["{{URL}}"],
              "path": ["wallets", "withdraw", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All User Top Up",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/wallets/topup/users/all",
              "host": ["{{URL}}"],
              "path": ["wallets", "topup", "users", "all"],
              "query": [
                {
                  "key": "orderDirection",
                  "value": "",
                  "description": "Available values: ASC, DESC",
                  "disabled": true
                },
                {
                  "key": "orderBy",
                  "value": "",
                  "description": "Available Fields: created_at, balance_request, balance_transfer",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Available Fields: balance_request, balance_transfer",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Available values: 0, 1, 2",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All User Withdraw",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString()\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/wallets/withdraw/users/all",
              "host": ["{{URL}}"],
              "path": ["wallets", "withdraw", "users", "all"],
              "query": [
                {
                  "key": "orderDirection",
                  "value": "",
                  "description": "Available values: ASC, DESC",
                  "disabled": true
                },
                {
                  "key": "orderBy",
                  "value": "",
                  "description": "Available Fields: created_at, balance_request, balance_transfer",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Available Fields: balance_request, balance_transfer",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Available values: 0, 1, 2",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Upload Top Up Proof",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test('test success', () => {\r",
                  "    pm.expect(response.code).to.eql(200);\r",
                  "    pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "    pm.expect(response.json().success).to.eql(true);\r",
                  "})"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data",
                "type": "text"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "image",
                  "type": "file",
                  "src": "/C:/Users/ACER/Desktop/Space Wallpaper/29924.jpg"
                }
              ]
            },
            "url": {
              "raw": "{{URL}}/wallets/topup/:id/image",
              "host": ["{{URL}}"],
              "path": ["wallets", "topup", ":id", "image"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Withdraw Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString(),\r",
                  "    body: pm.request.body\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"status\": 1\r\n}"
            },
            "url": {
              "raw": "{{URL}}/wallets/withdraw/:id/status",
              "host": ["{{URL}}"],
              "path": ["wallets", "withdraw", ":id", "status"],
              "variable": [
                {
                  "key": "id",
                  "value": "6",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Top Up Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const sendRequestOne = new Request({\r",
                  "    method: pm.request.method,\r",
                  "    url: pm.request.url.toString(),\r",
                  "    body: pm.request.body\r",
                  "})\r",
                  "pm.sendRequest(sendRequestOne, (_, response) => {\r",
                  "    pm.test('test success', () => {\r",
                  "        pm.expect(response.code).to.eql(200);\r",
                  "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"status\": 1\r\n}"
            },
            "url": {
              "raw": "{{URL}}/wallets/topup/:id/status",
              "host": ["{{URL}}"],
              "path": ["wallets", "topup", ":id", "status"],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Test Server",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const { Request } = require('postman-collection')\r",
              "\r",
              "const sendRequestOne = new Request({\r",
              "    method: pm.request.method,\r",
              "    url: pm.request.url.toString()\r",
              "})\r",
              "pm.sendRequest(sendRequestOne, (_, response) => {\r",
              "    pm.test('test server is live', () => {\r",
              "        pm.expect(response.code).to.eql(200);\r",
              "        pm.expect(response.headers.toObject()['content-type']).to.eql('text/plain; charset=utf-8');\r",
              "        pm.expect(response.text()).to.eql('hello world');\r",
              "    })\r",
              "});\r",
              "\r",
              "const sendRequestTwo = new Request({\r",
              "    method: pm.request.method,\r",
              "    url: pm.environment.replaceIn(\"{{URL}}/not-exist\")\r",
              "})\r",
              "pm.sendRequest(sendRequestTwo, (_, response) => {\r",
              "    pm.test('test url no exist', () => {\r",
              "        pm.expect(response.code).to.eql(404);\r",
              "        pm.expect(response.headers.toObject()['content-type']).to.eql('text/plain; charset=utf-8');\r",
              "        pm.expect(response.text()).to.eql('hi');\r",
              "    })\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{URL}}",
          "host": ["{{URL}}"]
        }
      },
      "response": []
    }
  ]
}
