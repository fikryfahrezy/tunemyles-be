{
  "info": {
    "_postman_id": "321038cc-53ab-4446-8ae3-3af834ceb176",
    "name": "Tunemyles",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "example",
      "item": [
        {
          "name": "GET Example",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get Success', () => {\r",
                  "        const { code, headers } = pm.response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(pm.response.json().success).to.eql(true);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{URL}}/example",
              "host": ["{{URL}}"],
              "path": ["example"]
            }
          },
          "response": []
        },
        {
          "name": "POST Example",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload) {\r",
                  "    return new Request({\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn(\"{{URL}}/example\"),\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "        },\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ name: 'name' }), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(201);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                  "    pm.test('Fail, Validation Fail', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"name\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/example",
              "host": ["{{URL}}"],
              "path": ["example"]
            }
          },
          "response": []
        },
        {
          "name": "GET Single Example",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(id) {\r",
                  "    return new Request({\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/example/${id}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.replaceIn(`{{EXAMPLE_ID}}`)), (_, response) => {\r",
                  "    pm.test('Found Single Data', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(100), (_, response) => {\r",
                  "    pm.test('Data Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404)\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{URL}}/example/:{{EXAMPLE_ID}}",
              "host": ["{{URL}}"],
              "path": ["example", ":{{EXAMPLE_ID}}"],
              "variable": [
                {
                  "key": "{{EXAMPLE_ID}}",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "POST Example File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(formdata) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    console.log(formdata);\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/example/file'),\r",
                  "        body: {\r",
                  "            formdata,\r",
                  "            mode: 'formdata',\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.test('Success', () => {\r",
                  "    const { code, headers } = pm.response;\r",
                  "\r",
                  "    pm.expect(code).to.eql(201);\r",
                  "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "    pm.expect(pm.response.json().success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest([{}]), (_, response) => {\r",
                  "    pm.test('Fail, File Not Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        console.log(response);\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "Bliss.png"
                }
              ]
            },
            "url": {
              "raw": "{{URL}}/example/file",
              "host": ["{{URL}}"],
              "path": ["example", "file"]
            }
          },
          "response": []
        },
        {
          "name": "GET Private Example",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = token;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/example/private'),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest('1'), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, Header Key Not Given', () => {\r",
                  "        const { code, headers, json } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('2'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong Header Key', () => {\r",
                  "        const { code, headers, json } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "1",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "authorization",
                  "type": "string"
                },
                {
                  "key": "in",
                  "value": "header",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{URL}}/example/private",
              "host": ["{{URL}}"],
              "path": ["example", "private"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "auth",
      "item": [
        {
          "name": "Regiter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const usedPhoneNumber = Date.now().toString();\r",
                  "const usedUsername = Math.random().toString(36).substring(2);\r",
                  "const userPassword = 'password';\r",
                  "const token = pm.response.json()?.data?.token;\r",
                  "\r",
                  "pm.environment.set('USER_USERNAME', usedUsername);\r",
                  "pm.environment.set('USER_PASSWORD', userPassword);\r",
                  "pm.environment.set('USER_PHONE', usedPhoneNumber);\r",
                  "\r",
                  "if (token) pm.environment.set('TOKEN', token);\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload) {\r",
                  "    return new Request({\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "        },\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/account/register'),\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const regPayload = function regPayload() {\r",
                  "    return {\r",
                  "        full_name: 'Name',\r",
                  "        username: usedUsername,\r",
                  "        password: userPassword,\r",
                  "        phone_number: usedPhoneNumber,\r",
                  "        address: 'address',\r",
                  "    };\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(regPayload()), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "        const json = response.json()\r",
                  "        \r",
                  "        pm.environment.set('TOKEN', json.data.token);\r",
                  "\r",
                  "        pm.expect(code).to.eql(201);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(json.success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), phone_number: usedPhoneNumber }), (_, response) => {\r",
                  "    pm.test('Fail, `phone_number` Already Exist', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(400);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), username: usedUsername }), (_, response) => {\r",
                  "    pm.test('Fail, `username` Already Exist', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(400);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), full_name: '' }), (_, response) => {\r",
                  "    pm.test('Fail, Empty `full_name`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), address: '' }), (_, response) => {\r",
                  "    pm.test('Fail, Empty `address`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), full_name: 'x' }), (_, response) => {\r",
                  "    pm.test('Fail, `full_name` too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), full_name: Array(257).toString() }), (_, response) => {\r",
                  "    pm.test('Fail, `full_name` too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({\r",
                  "    ...regPayload(),\r",
                  "    username: Math.random().toString(36).substring(7),\r",
                  "}), (_, response) => {\r",
                  "    pm.test('Fail, `username` too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), username: Array(22).toString() }), (_, response) => {\r",
                  "    pm.test('Fail, `username` too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), phone_number: '1234' }), (_, response) => {\r",
                  "    pm.test('Fail, `phone_number` too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), phone_number: '123456789012345' }), (_, response) => {\r",
                  "    pm.test('Fail, `phone_number` too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), address: 'addr' }), (_, response) => {\r",
                  "    pm.test('Fail, `phone_number` too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ ...regPayload(), address: Array(1002).toString() }), (_, response) => {\r",
                  "    pm.test('Fail, `address` too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                  "    pm.test('Fail, No Data Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"full_name\": \"Name\",\r\n    \"phone_number\": \"12345678931232\",\r\n    \"address\": \"address\",\r\n    \"username\": \"username\",\r\n    \"password\": \"password\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/register",
              "host": ["{{URL}}"],
              "path": ["account", "register"]
            }
          },
          "response": []
        },
        {
          "name": "Activate Merchant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(formdata, token = undefined) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/account/merchant'),\r",
                  "        body: {\r",
                  "            formdata,\r",
                  "            mode: 'formdata',\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.test('Success', () => {\r",
                  "    const { code, headers } = pm.response;\r",
                  "\r",
                  "    pm.expect(code).to.eql(201);\r",
                  "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "    pm.expect(pm.response.json().success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest([{}], pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, No Data Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": ["pm.environment.set(\"NO_IDENTITY\", Date.now());"],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "identity_photo",
                  "type": "file",
                  "src": "Bliss.png"
                },
                {
                  "key": "market_photo",
                  "type": "file",
                  "src": "Bliss.png"
                },
                {
                  "key": "no_identity",
                  "value": "{{NO_IDENTITY}}",
                  "type": "text"
                },
                {
                  "key": "market_name",
                  "value": "name",
                  "type": "text"
                },
                {
                  "key": "market_address",
                  "value": "address",
                  "type": "text"
                },
                {
                  "key": "market_lat",
                  "value": "-6.213131231",
                  "type": "text"
                },
                {
                  "key": "market_lon",
                  "value": "-6.213131231",
                  "type": "text"
                },
                {
                  "key": "market_close_time",
                  "value": "21:00",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{URL}}/account/merchant",
              "host": ["{{URL}}"],
              "path": ["account", "merchant"]
            }
          },
          "response": []
        },
        {
          "name": "[AVAILABLE IN TEST] Make User an Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " pm.test('User Success Become Admin', () => {\r",
                  "        const { code, headers } = pm.response;\r",
                  "        const json = pm.response.json();\r",
                  "        \r",
                  "        pm.environment.set('TOKEN', json.data);\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(json.success).to.eql(true);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/account/admin",
              "host": ["{{URL}}"],
              "path": ["account", "admin"]
            }
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const username = pm.environment.get('USER_USERNAME');\r",
                  "const password = pm.environment.get('USER_PASSWORD');\r",
                  "const token = pm.response.json()?.data?.token;\r",
                  "\r",
                  "if (token) pm.environment.set('TOKEN', token);\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload) {\r",
                  "    return new Request({\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "        },\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/account/login'),\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ username, password }), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "        const json = response.json()\r",
                  "        const token = json.data.token;\r",
                  "\r",
                  "        pm.environment.set('TOKEN', token);\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(json.success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ username, password: \"wrong-password\" }), (_, response) => {\r",
                  "    pm.test('Fail, Wrong `password`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(400);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({\r",
                  "    username: 'no-user-here',\r",
                  "    password: 'wrong-password',\r",
                  "}), (_, response) => {\r",
                  "    pm.test('Fail, User Not Registered', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(400);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ password: 'wrong-password' }), (_, response) => {\r",
                  "    pm.test('Fail, No `username` Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ username: 'no-user-here' }), (_, response) => {\r",
                  "    pm.test('Fail, No `password` Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"username\",\r\n    \"password\": \"password\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/login",
              "host": ["{{URL}}"],
              "path": ["account", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Get Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token = undefined) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/account/me'),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/account/me",
              "host": ["{{URL}}"],
              "path": ["account", "me"]
            }
          },
          "response": []
        },
        {
          "name": "Update Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const reqBodyWithoutFile = pm.request.body.formdata.filter(({ type }) => type !== 'file');\r",
                  "\r",
                  "const makeRequest = function makeRequest(formdata, token = undefined) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'PATCH',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/account/update-profile'),\r",
                  "        body: {\r",
                  "            formdata,\r",
                  "            mode: 'formdata',\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.test('Success, With Avatar', () => {\r",
                  "    const { code, headers } = pm.response;\r",
                  "\r",
                  "    pm.expect(code).to.eql(200);\r",
                  "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "    pm.expect(pm.response.json().success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    reqBodyWithoutFile,\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, Without Avatar', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'full_name',\r",
                  "        value: 'x',\r",
                  "        type: 'text',\r",
                  "    }],\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, `full_name` too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'full_name',\r",
                  "        value: Array(257).toString(),\r",
                  "        type: 'text'\r",
                  "    }],\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, `full_name` too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'phone_number',\r",
                  "        value: '1234',\r",
                  "        type: 'text',\r",
                  "    }],\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, `phone_number` too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'phone_number',\r",
                  "        value: '123456789012345',\r",
                  "        type: 'text'\r",
                  "    }],\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, `phone_number` too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'address',\r",
                  "        value: 'addr',\r",
                  "        type: 'text',\r",
                  "    }],\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, `address` too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'address',\r",
                  "        value: Array(1002).toString(),\r",
                  "        type: 'text',\r",
                  "    }],\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, `address` too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'password',\r",
                  "        value: 'pass',\r",
                  "        type: 'text',\r",
                  "    }],\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, `password` too Short', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    [{\r",
                  "        key: 'password',\r",
                  "        value: Array(257).toString(),\r",
                  "        type: 'text',\r",
                  "    }],\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, `password` too Long', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBodyWithoutFile, 'this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBodyWithoutFile), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": ["pm.environment.set(\"USER_PHONE\", Date.now());"],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "avatar",
                  "type": "file",
                  "src": "Bliss.png"
                },
                {
                  "key": "full_name",
                  "value": "New Name",
                  "type": "text"
                },
                {
                  "key": "address",
                  "value": "New Address",
                  "type": "text"
                },
                {
                  "key": "phone_number",
                  "value": "{{USER_PHONE}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "newpassword",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{URL}}/account/update-profile",
              "host": ["{{URL}}"],
              "path": ["account", "update-profile"]
            }
          },
          "response": []
        },
        {
          "name": "Forgot Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload) {\r",
                  "    return new Request({\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "        },\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/account/forgot-password'),\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest({\r",
                  "    phone_number: pm.environment.get('USER_PHONE'),\r",
                  "}), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(201);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ phone_number: '6991224220261' }), (_, response) => {\r",
                  "    pm.test('Fail, `phone_number` not Registered', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                  "    pm.test('Fail, No `phone_number` Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "description": "JSON Type",
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"phone_number\": \"12345678931232\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/forgot-password",
              "host": ["{{URL}}"],
              "path": ["account", "forgot-password"]
            }
          },
          "response": []
        },
        {
          "name": "Verify Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const makeRequest = function makeRequest(token = undefined) {\r",
                  "    return new Request({\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/account/verify-token/${token ? token : ''}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-token-not-exists'), (_, response) => {\r",
                  "    pm.test('Fail, Token Invalid', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, No Token Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/account/verify-token/:token",
              "host": ["{{URL}}"],
              "path": ["account", "verify-token", ":token"],
              "variable": [
                {
                  "key": "token",
                  "value": "ffa62652d6eabbcc5d763494f456a5685b0e80e468f6b61e230cb56bb7e7c256"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload) {\r",
                  "    return new Request({\r",
                  "        header: {\r",
                  "            'Content-Type': 'application/json',\r",
                  "        },\r",
                  "        method: 'PATCH',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/account/reset-password'),\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ token: 'this-token-not-exists', new_password: 'newpassword' }), (_, response) => {\r",
                  "    pm.test('Fail, `token` Invalid', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ new_password: 'newpassword' }), (_, response) => {\r",
                  "    pm.test('Fail, No `token` Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({ token: 'this-token-not-exists' }), (_, response) => {\r",
                  "    pm.test('Fail, No `new_password` Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "description": "JSON Type",
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"token\": \"ffa62652d6eabbcc5d763494f456a5685b0e80e468f6b61e230cb56bb7e7c256\",\r\n    \"new_password\": \"newpassword\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/account/reset-password",
              "host": ["{{URL}}"],
              "path": ["account", "reset-password"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "master",
      "item": [
        {
          "name": "bank",
          "item": [
            {
              "name": "Post Master Bank",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const reqBodyWithoutFile = pm.request.body.formdata.filter(({ type }) => type !== 'file');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'POST',\r",
                      "        url: pm.environment.replaceIn('{{URL}}/masters/banks'),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Success, With Logo', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(201);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBodyWithoutFile,\r",
                      "    pm.environment.get('TOKEN')\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, Without Logo', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(201);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, No `bank_name` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBodyWithoutFile, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBodyWithoutFile), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "logo",
                      "type": "file",
                      "src": "Bliss.png"
                    },
                    {
                      "key": "bank_name",
                      "value": "test",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/banks",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks"]
                }
              },
              "response": []
            },
            {
              "name": "Get Master Banks",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token, query = '') {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/banks${query}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Success, Without Query', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?limit=1',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `limit=1`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "        const body = response.json();\r",
                      "\r",
                      "        pm.environment.set('MASTER_BANK_ID', body.data[0].id);\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(body.success).to.eql(true);\r",
                      "        pm.expect(body.data.length).to.eql(1);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=created_at&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=created_at&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=bank_name&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=bank_name&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=created_at&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=created_at&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=bank_name&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=bank_name&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, with Query `?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, with Query `?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "url": {
                  "raw": "{{URL}}/masters/banks",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks"],
                  "query": [
                    {
                      "key": "orderDirection",
                      "value": "",
                      "description": "Available values: ASC, DESC",
                      "disabled": true
                    },
                    {
                      "key": "orderBy",
                      "value": "",
                      "description": "Available Fields: created_at, bank_name",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Available Fields: bank_name",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "",
                      "description": "Available values: 0...n",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Post Master Bank Step",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const reqBody = { step: 'test' };\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, bankId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'POST',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/banks/${bankId}/steps`),\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBody,\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MASTER_BANK_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(201);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, No `step` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"step\": \"test\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/masters/banks/:id/steps",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks", ":id", "steps"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "8",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Master Bank Detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, bankId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/banks/${bankId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MASTER_BANK_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "        const body = response.json();\r",
                      "\r",
                      "        pm.environment.set('MASTER_BANK_STEP_ID', body.data.steps[0].id);\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(body.success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Master Bank Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "url": {
                  "raw": "{{URL}}/masters/banks/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "8",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Master Bank",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, bankId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/banks/${bankId}`),\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    {\r",
                      "        bank_name: 'new bank name',\r",
                      "        is_visible: 2,\r",
                      "    },\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MASTER_BANK_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "        \r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Master Bank Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"bank_name\": \"new bank name\",\r\n    \"visibility\": 2\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/masters/banks/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "8",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Master Bank Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, bankId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/banks/${bankId}/account`),\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    {\r",
                      "        account_number: \"0123421421\",\r",
                      "        account_name: \"update name\"\r",
                      "    },\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MASTER_BANK_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Master Bank Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"account_number\": \"0123421421\",\r\n    \"account_name\": \"update name\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/masters/banks/:id/account",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks", ":id", "account"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "9"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Change Master Bank Logo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined, bankId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/banks/${bankId}/logo`),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(200);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, No `logo` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "logo",
                      "type": "file",
                      "src": "Bliss.png"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/banks/:id/logo",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks", ":id", "logo"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{MASTER_BANK_ID}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Master Bank Step",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, bankStepId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'DELETE',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/banks/steps/${bankStepId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MASTER_BANK_STEP_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Master Bank Step Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/masters/banks/steps/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks", "steps", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "6",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Master Bank",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, bankId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'DELETE',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/banks/${bankId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MASTER_BANK_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Master Bank Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"bank_name\": \"new bank name\",\r\n    \"is_visible\": 2\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/masters/banks/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "banks", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "9",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "category",
          "item": [
            {
              "name": "Post Category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const reqBodyWithoutFile = pm.request.body.formdata.filter(({ type }) => type !== 'file');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'POST',\r",
                      "        url: pm.environment.replaceIn('{{URL}}/masters/categories'),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Success, With Icon', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(201);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBodyWithoutFile,\r",
                      "    pm.environment.get('TOKEN')\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, Without Icon', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(201);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, No Data Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBodyWithoutFile, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBodyWithoutFile), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "icon",
                      "type": "file",
                      "src": "Bliss.png"
                    },
                    {
                      "key": "category",
                      "value": "test",
                      "type": "text"
                    },
                    {
                      "key": "slug",
                      "value": "test",
                      "type": "text"
                    },
                    {
                      "key": "description",
                      "value": "test",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/categories",
                  "host": ["{{URL}}"],
                  "path": ["masters", "categories"]
                }
              },
              "response": []
            },
            {
              "name": "Get Categories",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token, query = '') {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/categories${query}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Success, Without Query', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?limit=1',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?limit=1`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "        const body = response.json();\r",
                      "\r",
                      "        pm.environment.set('CATEGORY_ID', body.data[0].id);\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(body.success).to.eql(true);\r",
                      "        pm.expect(body.data.length).to.eql(1);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=created_at&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=created_at&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=category&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=category&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=description&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=description&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=created_at&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=created_at&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=category&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=category&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=description&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=created_at&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, with Query `?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, with Query `?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "url": {
                  "raw": "{{URL}}/masters/categories",
                  "host": ["{{URL}}"],
                  "path": ["masters", "categories"],
                  "query": [
                    {
                      "key": "orderDirection",
                      "value": "",
                      "description": "Available values: ASC, DESC",
                      "disabled": true
                    },
                    {
                      "key": "orderBy",
                      "value": "",
                      "description": "Available Fields: created_at, category, description",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Available Fields: category, description",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "",
                      "description": "Available values: 0...n",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": null,
                      "description": "Available values: 0...n",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, categoryId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/categories/${categoryId}`),\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    {\r",
                      "        category: 'new category',\r",
                      "        slug: 'new category slug',\r",
                      "        description: 'new category description',\r",
                      "        is_visible: 2,\r",
                      "    },\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('CATEGORY_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Category Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"category\": \"new category\",\r\n    \"slug\": \"new category slug\",\r\n    \"description\": \"new category description\",\r\n    \"visibility\": 2\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/masters/categories/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "categories", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "77",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Change Category Icon",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined, categoryId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/categories/${categoryId}/icon`),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(200);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, No `icon` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "icon",
                      "type": "file",
                      "src": "Bliss.png"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/categories/:id/icon",
                  "host": ["{{URL}}"],
                  "path": ["masters", "categories", ":id", "icon"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "{{CATEGORY_ID}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, categoryId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'DELETE',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/categories/${categoryId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('CATEGORY_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Category Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/masters/categories/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "categories", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "3",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "media",
          "item": [
            {
              "name": "Post Media",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'POST',\r",
                      "        url: pm.environment.replaceIn('{{URL}}/masters/medias'),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(201);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, No `image` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "image",
                      "type": "file",
                      "src": "Bliss.png"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/medias",
                  "host": ["{{URL}}"],
                  "path": ["masters", "medias"]
                }
              },
              "response": []
            },
            {
              "name": "Get Medias",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token, query = '') {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/medias${query}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Success, Without Query', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?limit=1',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?limit=1`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "        const body = response.json();\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(body.success).to.eql(true);\r",
                      "        // pm.expect(body.data.length).to.eql(1);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=created_at&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=created_at&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=label&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=label&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=created_at&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=created_at&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=label&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=label&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, with Query `?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, with Query `?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "url": {
                  "raw": "{{URL}}/masters/medias",
                  "host": ["{{URL}}"],
                  "path": ["masters", "medias"],
                  "query": [
                    {
                      "key": "orderDirection",
                      "value": "",
                      "description": "Available values: ASC, DESC",
                      "disabled": true
                    },
                    {
                      "key": "orderBy",
                      "value": "",
                      "description": "Available Fields: created_at, label",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Available Fields: label",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "",
                      "description": "Available values: 0...n",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": null,
                      "description": "Available values: 0...n",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Media",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined, mediaId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/medias/${mediaId}`),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(200);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, No `image` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "image",
                      "type": "file",
                      "src": "Bliss.png"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/medias/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "medias", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "4",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Media",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, mediaId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'DELETE',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/medias/${mediaId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MEDIA_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Media Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "url": {
                  "raw": "{{URL}}/masters/medias/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "medias", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "63",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "wallet",
          "item": [
            {
              "name": "Post Master Wallet",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const reqBodyWithFile = pm.request.body.formdata;\r",
                      "const reqBodyWithoutFile = reqBodyWithFile.filter(({ type }) => type !== 'file');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'POST',\r",
                      "        url: pm.environment.replaceIn('{{URL}}/masters/wallets'),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Success, With Logo', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(201);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBodyWithoutFile,\r",
                      "    pm.environment.get('TOKEN')\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, Without Logo', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(201);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, No Data Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBodyWithoutFile,\r",
                      "    'this-is-wrong',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBodyWithoutFile), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "logo",
                      "type": "file",
                      "src": "Bliss.png"
                    },
                    {
                      "key": "wallet_name",
                      "value": "test",
                      "type": "text"
                    },
                    {
                      "key": "wallet_description",
                      "value": "test",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/wallets",
                  "host": ["{{URL}}"],
                  "path": ["masters", "wallets"]
                }
              },
              "response": []
            },
            {
              "name": "Get Master Wallets",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token, query = '') {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/wallets${query}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Success, Without Query', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?limit=1',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?limit=1`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "        const body = response.json();\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(body.success).to.eql(true);\r",
                      "        // pm.expect(body.data.length).to.eql(1);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=created_at&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=created_at&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=wallet_name&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=wallet_name&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=wallet_description&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=wallet_description&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=created_at&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=created_at&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=wallet_name&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=wallet_name&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=wallet_description&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=wallet_description&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, with Query `?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, with Query `?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "url": {
                  "raw": "{{URL}}/masters/wallets",
                  "host": ["{{URL}}"],
                  "path": ["masters", "wallets"],
                  "query": [
                    {
                      "key": "orderDirection",
                      "value": "",
                      "description": "Available values: ASC, DESC",
                      "disabled": true
                    },
                    {
                      "key": "orderBy",
                      "value": "",
                      "description": "Available Fields: created_at, wallet_name, wallet_description",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Available Fields: wallet_name, wallet_description",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "",
                      "description": "Available values: 0...n",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": null,
                      "description": "Available values: 0...n",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Master Wallet",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, walletId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/wallets/${walletId}`),\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    {\r",
                      "        wallet_name: 'new wallet name',\r",
                      "        wallet_description: 'new wallet description',\r",
                      "        is_visible: 2,\r",
                      "    },\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('WALLET_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Wallet Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "value",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    },
                    {
                      "key": "key",
                      "value": "authorization",
                      "type": "string"
                    },
                    {
                      "key": "in",
                      "value": "header",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"wallet_name\": \"new wallet name\",\r\n    \"wallet_description\": \"new wallet description\",\r\n    \"visibility\": 2\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/masters/wallets/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "wallets", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Change Master Wallet Logo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined, walletId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/wallets/${walletId}/logo`),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(200);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Change Wallet Logo Fail, No `logo` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "logo",
                      "type": "file",
                      "src": "Bliss.png"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/masters/wallets/:id/logo",
                  "host": ["{{URL}}"],
                  "path": ["masters", "wallets", ":id", "logo"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "3",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Master Wallet",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, walletId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'DELETE',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/categories/${walletId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('WALLET_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Wallet Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/masters/wallets/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "wallets", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "3",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "faq",
          "item": [
            {
              "name": "Post Faq",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const reqBody = {\r",
                      "    question: 'Hai?',\r",
                      "    answer: 'Hello',\r",
                      "}\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'POST',\r",
                      "        url: pm.environment.replaceIn('{{URL}}/masters/faqs'),\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(201);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, No Data Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(201);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"question\": \"Hai?\",\r\n    \"answer\": \"Hello\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/masters/faqs",
                  "host": ["{{URL}}"],
                  "path": ["masters", "faqs"]
                }
              },
              "response": []
            },
            {
              "name": "Get Faqs",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(200);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{URL}}/masters/faqs",
                  "host": ["{{URL}}"],
                  "path": ["masters", "faqs"]
                }
              },
              "response": []
            },
            {
              "name": "Update Faq",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, faqId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/faqs/${faqId}`),\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    {\r",
                      "        question: 'Hai?',\r",
                      "        answer: 'Hello',\r",
                      "    },\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('FAQ_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Faq Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"question\": \"Hello?\",\r\n    \"answer\": \"Hi\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/masters/faqs/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "faqs", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Faq",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, faqId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'DELETE',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/masters/categories/${faqId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('FAQ_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Faq Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{URL}}/masters/faqs/:id",
                  "host": ["{{URL}}"],
                  "path": ["masters", "faqs", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "merchant",
      "item": [
        {
          "name": "profile",
          "item": [
            {
              "name": "Get Merchant Profile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn('{{URL}}/merchants'),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants",
                  "host": ["{{URL}}"],
                  "path": ["merchants"]
                }
              },
              "response": []
            },
            {
              "name": "Update Merchant Profile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const reqBodyWithoutFile = pm.request.body.formdata.filter(({ type }) => type !== 'file');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn('{{URL}}/merchants'),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(201);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBodyWithoutFile, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBodyWithoutFile), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["pm.environment.set(\"NO_IDENTITY\", Date.now());"],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "market_photo",
                      "type": "file",
                      "src": "Bliss.png"
                    },
                    {
                      "key": "identity_photo",
                      "type": "file",
                      "src": "Bliss.png"
                    },
                    {
                      "key": "no_identity",
                      "value": "{{NO_IDENTITY}}",
                      "type": "text"
                    },
                    {
                      "key": "market_name",
                      "value": "New Market Name",
                      "type": "text"
                    },
                    {
                      "key": "market_address",
                      "value": "New Market Address",
                      "type": "text"
                    },
                    {
                      "key": "market_lat",
                      "value": "13.321",
                      "type": "text"
                    },
                    {
                      "key": "market_lon",
                      "value": "122.31",
                      "type": "text"
                    },
                    {
                      "key": "market_close_time",
                      "value": "21:00",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/merchants",
                  "host": ["{{URL}}"],
                  "path": ["merchants"]
                }
              },
              "response": []
            },
            {
              "name": "Update Merchant Close Time",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const reqBody = { close_time: '22:00' };\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn('{{URL}}/merchants/operation-time'),\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail No `close_time` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"close_time\": \"22:00\"\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/merchants/operation-time",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "operation-time"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "product",
          "item": [
            {
              "name": "Post Merchant Product",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'POST',\r",
                      "        url: pm.environment.replaceIn('{{URL}}/merchants/products'),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Success, With Logo', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(201);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, No Data Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "cover",
                      "type": "file",
                      "src": "Bliss.png"
                    },
                    {
                      "key": "product_name",
                      "value": "name",
                      "type": "text"
                    },
                    {
                      "key": "description",
                      "value": "description",
                      "type": "text"
                    },
                    {
                      "key": "price_default",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "price_selling",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "qty",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "discount",
                      "value": "1",
                      "type": "text"
                    },
                    {
                      "key": "status",
                      "value": "1",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/merchants/products",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products"]
                }
              },
              "response": []
            },
            {
              "name": "Get Merchant Products",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token, query = '') {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/products${query}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Success, Without Query', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?limit=1',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?limit=1`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "        const body = response.json();\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(body.success).to.eql(true);\r",
                      "        // pm.expect(body.data.length).to.eql(1);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=created_at&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=created_at&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=product_name&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=product_name&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=market_name&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=market_name&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=market_address&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=market_address&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=created_at&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=created_at&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=product_name&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=product_name&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=market_name&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=market_name&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=market_address&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=market_address&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESCs&orderBy=created_at&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, with Query `?orderDirection=ASC&orderBy=market_name&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=created_ats&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, with Query `?orderDirection=DESC&orderBy=created_ats&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/products",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products"],
                  "query": [
                    {
                      "key": "orderDirection",
                      "value": "",
                      "description": "Available values: ASC, DESC",
                      "disabled": true
                    },
                    {
                      "key": "orderBy",
                      "value": "",
                      "description": "Available Fields: created_at,  product_name, market_name, market_address",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Available Fields: product_name, market_name, market_address",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "",
                      "description": "Available values: 0...n",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": null,
                      "description": "Available values: 0...n",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Merchant Product",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, productId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/products/${productId}`),\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "   {\r",
                      "        product_name: 'new name',\r",
                      "        description: 'new descs',\r",
                      "        price_default: 2,\r",
                      "        price_selling: 2,\r",
                      "        qty: 2,\r",
                      "        discount: 2,\r",
                      "        is_visible: 2,\r",
                      "    },\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MASTER_PRODUCT_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Merchant Product Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "description": "JSON Type",
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"product_name\": \"new name\",\r\n    \"description\": \"new descs\",\r\n    \"price_default\": 2,\r\n    \"price_selling\": 2,\r\n    \"qty\": 2,\r\n    \"discount\": 2,\r\n    \"status\": 2\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:id",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Merchant Product Cover",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined, productId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/products/${productId}/cover`),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(200);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.get('MERCHANT_PRODUCT_ID')), (_, response) => {\r",
                      "    pm.test('Fail, No `cover` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "cover",
                      "type": "file",
                      "src": "Bliss.png"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:id/cover",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":id", "cover"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Merchant Product Status",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const reqBody = { status: 1 };\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, productId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/products/${productId}/status`),\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBody,\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MERCHANT_PRODUCT_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Merchant Product Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, No `status` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"status\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:id/status",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":id", "status"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Bind Merchant Product Category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const reqBody = { category_id: 1 };\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, productId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/products/${productId}/category`),\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        }\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBody,\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MERCHANT_PRODUCT_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    reqBody,\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MERCHANT_PRODUCT_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, Category Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Merchant Product Category Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, No `category_id` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"category_id\": 1\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:id/category",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":id", "category"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Merchant Product Detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, productId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/products/${productId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MERCHANT_PRODUCT_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Merchant Product Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:id",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Post Merchant Product Image",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(formdata, token = undefined, productId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'POST',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/products/${productId}/image`),\r",
                      "        body: {\r",
                      "            formdata,\r",
                      "            mode: 'formdata',\r",
                      "        },\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.test('Success', () => {\r",
                      "    const { code, headers } = pm.response;\r",
                      "\r",
                      "    pm.expect(code).to.eql(201);\r",
                      "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "    pm.expect(pm.response.json().success).to.eql(true);\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest([{}], pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, No `image` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "image",
                      "type": "file",
                      "src": "Bliss.png"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:id/image",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":id", "image"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Merchant Product Category",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(\r",
                      "    token = undefined,\r",
                      "    productId = 0,\r",
                      "    categoryId = 0\r",
                      ") {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'DELETE',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/products/${productId}/category/${categoryId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MERCHANT_PRODUCT_ID'),\r",
                      "    pm.environment.get('PRODUCT_CATEGORY_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MERCHANT_PRODUCT_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, Merchant Product Category Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Merchant Product Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:productId/category/:categoryId",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":productId", "category", ":categoryId"],
                  "variable": [
                    {
                      "key": "productId",
                      "value": "1",
                      "type": "string"
                    },
                    {
                      "key": "categoryId",
                      "value": "69",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Merchant Product Image",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, productId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'DELETE',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/products/image/${productId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('PRODUCT_IMAGE_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Merchant Product Image Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/image/:id",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", "image", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Merchant Product",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, productId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'DELETE',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/products/image/${productId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MERCHANT_PRODUCT_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Merchant Product Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL}}/merchants/products/:id",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "products", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "order",
          "item": [
            {
              "name": "Get Merchant Orders",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token, query = '') {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/orders${query}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Success, Without Query', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?limit=1',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?limit=1`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "        const body = response.json();\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(body.success).to.eql(true);\r",
                      "        // pm.expect(body.data.length).to.eql(1);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=created_at&search=&page=&limit=&status=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=full_name&search=&page=&limit=&status=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=full_name&search=&page=&limit=&status=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=phone_number&search=&page=&limit=&status=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=phone_number&search=&page=&limit=&status=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=address&search=&page=&limit=&status=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=address&search=&page=&limit=&status=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=created_at&search=&page=&limit=&status=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=full_name&search=&page=&limit=&status=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=full_name&search=&page=&limit=&status=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=phone_number&search=&page=&limit=&status=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=phone_number&search=&page=&limit=&status=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=address&search=&page=&limit=&status=0',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=address&search=&page=&limit=&status=0`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, with Query `?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/orders",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "orders"],
                  "query": [
                    {
                      "key": "orderDirection",
                      "value": "",
                      "description": "Available values: ASC, DESC",
                      "disabled": true
                    },
                    {
                      "key": "orderBy",
                      "value": "",
                      "description": "Available Fields: created_at, full_name, phone_number, address",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Available Fields: full_name, phone_number, address",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "",
                      "description": "Available values: 0...n",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": null,
                      "description": "Available values: 0...n",
                      "disabled": true
                    },
                    {
                      "key": "status",
                      "value": "",
                      "description": "Available values: 0, 1, 2",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Merchant Order Detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, orderId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/orders/${orderId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MERCHANT_ORDER_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Merchant Order Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/orders/:id",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "orders", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Merchant Order Status",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(payload, token = undefined, orderId = 0) {\r",
                      "    const header = {\r",
                      "        'Content-Type': 'application/json',\r",
                      "    };\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'PATCH',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/orders/${orderId}`),\r",
                      "        body: {\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify(payload),\r",
                      "        }\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    { status: 1 },\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MERCHANT_PRODUCT_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    { status: 1 },\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MERCHANT_PRODUCT_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, Order Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, No `status` Provided', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}, 'this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest({}), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "description": "JSON Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"status\": 2\r\n}"
                },
                "url": {
                  "raw": "{{URL}}/merchants/orders/:id",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "orders", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "merchant list",
          "item": [
            {
              "name": "Get Merchant List",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token, query = '') {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/list${query}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Success, Without Query', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?limit=1',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?limit=1`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "        const body = response.json();\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(body.success).to.eql(true);\r",
                      "        // pm.expect(body.data.length).to.eql(1);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=created_at&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=created_at&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=full_name&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=full_name&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=phone_number&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=phone_number&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=market_name&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=market_name&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=market_address&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=market_address&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=created_at&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=created_at&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=full_name&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=full_name&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=phone_number&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=phone_number&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=market_name&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=market_name&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=ASC&orderBy=market_address&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=market_address&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESCs&orderBy=created_at&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, with Query `?orderDirection=ASC&orderBy=market_name&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?orderDirection=DESC&orderBy=created_ats&search=&page=',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Fail, with Query `?orderDirection=DESC&orderBy=created_ats&search=&page=`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(422);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/list",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "list"],
                  "query": [
                    {
                      "key": "orderDirection",
                      "value": "",
                      "description": "Available values: ASC, DESC",
                      "disabled": true
                    },
                    {
                      "key": "orderBy",
                      "value": "",
                      "description": "Available Fields: created_at,  full_name, phone_number, market_name, market_address",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "",
                      "description": "Available Fields: full_name, phone_number, market_name, market_address",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "",
                      "description": "Available values: 0...n",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": null,
                      "description": "Available values: 0...n",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Merchant Product List",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection')\r",
                      "\r",
                      "const makeRequest = function makeRequest(token = undefined, merchantId = 0) {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/list/${merchantId}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    pm.environment.get('MERCHANT_ID'),\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Fail, Merchant Not Found', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(404);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/list/:id",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "list", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "1",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Random Merchants",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token, query = '') {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/random${query}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Success, Without Query', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?limit=1',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?limit=1`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "        const body = response.json();\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(body.success).to.eql(true);\r",
                      "        // pm.expect(body.data.length).to.eql(1);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/random",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "random"],
                  "query": [
                    {
                      "key": "limit",
                      "value": "",
                      "description": "Available values: 0...n",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "transaction",
          "item": [
            {
              "name": "Get Merchant Transaction Histories",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token, query = '') {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/transactions${query}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                      "    pm.test('Success, Without Query', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.get('TOKEN'),\r",
                      "    '?date=2021-2-3',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?date=2021-2-3`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/transactions",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "transactions"],
                  "query": [
                    {
                      "key": "date",
                      "value": "",
                      "description": "Available values: year-month-date",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Merchant Income Histories",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const { Request } = require('postman-collection');\r",
                      "\r",
                      "const makeRequest = function makeRequest(token, query = '') {\r",
                      "    const header = {};\r",
                      "\r",
                      "    if (token) header.authorization = `Bearer ${token}`;\r",
                      "\r",
                      "    return new Request({\r",
                      "        header,\r",
                      "        method: 'GET',\r",
                      "        url: pm.environment.replaceIn(`{{URL}}/merchants/incomes${query}`),\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "pm.sendRequest(makeRequest(pm.environment.replaceIn('{{TOKEN}}')), (_, response) => {\r",
                      "    pm.test('Success, Without Query', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest(\r",
                      "    pm.environment.replaceIn('{{TOKEN}}'),\r",
                      "    '?year=2021',\r",
                      "), (_, response) => {\r",
                      "    pm.test('Success, with Query `?year=2021`', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(200);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(true);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                      "    pm.test('Fail, Wrong API Key', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.sendRequest(makeRequest(), (_, response) => {\r",
                      "    pm.test('Fail, API Key Not Given', () => {\r",
                      "        const { code, headers } = response;\r",
                      "\r",
                      "        pm.expect(code).to.eql(403);\r",
                      "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                      "        pm.expect(response.json().success).to.eql(false);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{TOKEN}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{URL}}/merchants/incomes",
                  "host": ["{{URL}}"],
                  "path": ["merchants", "incomes"],
                  "query": [
                    {
                      "key": "year",
                      "value": "",
                      "description": "Available values: year",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "products",
      "item": [
        {
          "name": "Get Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token, query = '') {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/products${query}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Success, Without Query', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?limit=1',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?limit=1`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "        const body = response.json();\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(body.success).to.eql(true);\r",
                  "        // pm.expect(body.data.length).to.eql(1);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=created_at&search=&page=&limit=',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=created_at&search=&page=&limit=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=product_name&search=&page=&limit=',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=product_name&search=&page=&limit=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=market_name&search=&page=&limit=',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=market_name&search=&page=&limit=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=market_address&search=&page=&limit=',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=market_address&search=&page=&limit=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=created_at&search=&page=&limit=',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=created_at&search=&page=&limit=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=product_name&search=&page=&limit=',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=product_name&search=&page=&limit=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=market_name&search=&page=&limit=',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=market_name&search=&page=&limit=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=market_address&search=&page=&limit=',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=market_address&search=&page=&limit=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, with Query `?orderDirection=ASC&orderBy=market_name&search=&page=&limit=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, with Query `?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/products",
              "host": ["{{URL}}"],
              "path": ["products"],
              "query": [
                {
                  "key": "orderDirection",
                  "value": "",
                  "description": "Available values: ASC, DESC",
                  "disabled": true
                },
                {
                  "key": "orderBy",
                  "value": "",
                  "description": "Available Fields: created_at,  product_name, market_name, market_address",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Available Fields: product_name, market_name, market_address",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Available values: 0...n",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Available values: 0...n",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Products by Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token, query = '', categoryId = 0) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/products/categories/${categoryId}${query}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '',\r",
                  "    pm.environment.get('PRODUCT_CATEGORY_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, Without Query', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN'), ''), (_, response) => {\r",
                  "    pm.test('Success, Without Query and Category Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "        // pm.expect(body.data.length).to.eql(0);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?limit=1',\r",
                  "    pm.environment.get('PRODUCT_CATEGORY_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?limit=1`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "        const body = response.json();\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(body.success).to.eql(true);\r",
                  "        // pm.expect(body.data.length).to.eql(1);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=created_at&search=&page=',\r",
                  "    pm.environment.get('PRODUCT_CATEGORY_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=created_at&search=&page=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=product_name&search=&page=',\r",
                  "    pm.environment.get('PRODUCT_CATEGORY_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=product_name&search=&page=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=market_name&search=&page=',\r",
                  "    pm.environment.get('PRODUCT_CATEGORY_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=market_name&search=&page=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=market_address&search=&page=',\r",
                  "    pm.environment.get('PRODUCT_CATEGORY_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=market_address&search=&page=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=created_at&search=&page=',\r",
                  "    pm.environment.get('PRODUCT_CATEGORY_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=created_at&search=&page=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=product_name&search=&page=',\r",
                  "    pm.environment.get('PRODUCT_CATEGORY_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=product_name&search=&page=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=market_name&search=&page=',\r",
                  "    pm.environment.get('PRODUCT_CATEGORY_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=market_name&search=&page=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=market_address&search=&page=',\r",
                  "    pm.environment.get('PRODUCT_CATEGORY_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=market_address&search=&page=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESCs&orderBy=created_at&search=&page=',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, with Query `?orderDirection=ASC&orderBy=market_name&search=&page=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=created_ats&search=&page=',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, with Query `?orderDirection=DESC&orderBy=created_ats&search=&page=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/products/categories/:id",
              "host": ["{{URL}}"],
              "path": ["products", "categories", ":id"],
              "query": [
                {
                  "key": "orderDirection",
                  "value": "",
                  "description": "Available values: ASC, DESC",
                  "disabled": true
                },
                {
                  "key": "orderBy",
                  "value": "",
                  "description": "Available Fields: created_at,  product_name, market_name, market_address",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": null,
                  "description": "Available Fields: product_name, market_name, market_address",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Available values: 0...n",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Available values: 0...n",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "cart",
      "item": [
        {
          "name": "Add Item to Cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const reqBody = {\r",
                  "    qty: 1,\r",
                  "    merchant_id: 3,\r",
                  "    product_id: 2,\r",
                  "};\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload, token = undefined) {\r",
                  "    const header = {\r",
                  "        'Content-Type': 'application/json',\r",
                  "    };\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/carts'),\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(201);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, No Data Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"qty\": 1,\r\n    \"merchant_id\": 3,\r\n    \"product_id\": 2\r\n}"
            },
            "url": {
              "raw": "{{URL}}/carts",
              "host": ["{{URL}}"],
              "path": ["carts"]
            }
          },
          "response": []
        },
        {
          "name": "Get Cart Items",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const makeRequest = function makeRequest(token = undefined) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/carts'),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": []
            },
            "url": {
              "raw": "{{URL}}/carts",
              "host": ["{{URL}}"],
              "path": ["carts"]
            }
          },
          "response": []
        },
        {
          "name": "Update Cart Item Qty",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const reqBody = { qty: 1 };\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload, token = undefined, cartItemId = 0) {\r",
                  "    const header = {\r",
                  "        'Content-Type': 'application/json',\r",
                  "    };\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'PATCH',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/carts/${cartItemId}`),\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    reqBody,\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    pm.environment.get('CART_ITEM_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, Cart Item Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, No `qty` Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"qty\": 1\r\n}"
            },
            "url": {
              "raw": "{{URL}}/carts/:id",
              "host": ["{{URL}}"],
              "path": ["carts", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Cart Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token = undefined, cartItemId = 0) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'DELETE',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/carts/${cartItemId}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    pm.environment.get('CART_ITEM_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, Cart Item Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": []
            },
            "url": {
              "raw": "{{URL}}/carts/:id",
              "host": ["{{URL}}"],
              "path": ["carts", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Checkout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const reqBody = { price_total: 1000 };\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload, token = undefined) {\r",
                  "    const header = {\r",
                  "        'Content-Type': 'application/json',\r",
                  "    };\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/carts/checkout'),\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(201);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"price_total\": 1000\r\n}"
            },
            "url": {
              "raw": "{{URL}}/carts/checkout",
              "host": ["{{URL}}"],
              "path": ["carts", "checkout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "transaction",
      "item": [
        {
          "name": "Get User Processed Transactions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token, query = '') {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/transactions${query}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Success, Without Query', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?limit=1',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?limit=1`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "        const body = response.json();\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(body.success).to.eql(true);\r",
                  "        // pm.expect(body.data.length).to.eql(1);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=created_at&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=full_name&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=full_name&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=phone_number&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=phone_number&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=address&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=address&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=created_at&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=full_name&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=full_name&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=phone_number&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=phone_number&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=address&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=address&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, with Query `?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, with Query `?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": []
            },
            "url": {
              "raw": "{{URL}}/transactions",
              "host": ["{{URL}}"],
              "path": ["transactions"],
              "query": [
                {
                  "key": "orderDirection",
                  "value": "",
                  "description": "Available values: ASC, DESC",
                  "disabled": true
                },
                {
                  "key": "orderBy",
                  "value": "",
                  "description": "Available Fields: created_at, full_name, phone_number, address",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Available Fields: full_name, phone_number, address",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Available values: 0...n",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": null,
                  "description": "Available values: 0...n",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Available values: 0, 1, 2, 3",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Transaction Detail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const makeRequest = function makeRequest(token = undefined, userTransactionId = 0) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/transactions/${userTransactionId}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    pm.environment.get('USER_TRANSACTION_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, User Transaction Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": []
            },
            "url": {
              "raw": "{{URL}}/transactions/:id",
              "host": ["{{URL}}"],
              "path": ["transactions", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Finish Transaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token = undefined, userTransactionId = 0) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'PATCH',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/transactions/${userTransactionId}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    pm.environment.get('USER_TRANSACTION_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, User Transaction Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": []
            },
            "url": {
              "raw": "{{URL}}/transactions/:id",
              "host": ["{{URL}}"],
              "path": ["transactions", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Review Transaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const reqBody = {\r",
                  "    rating: 5,\r",
                  "    review: \"Mantap\",\r",
                  "};\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload, token = undefined, userTransactionId = 0) {\r",
                  "    const header = {\r",
                  "        'Content-Type': 'application/json',\r",
                  "    };\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/transactions/${userTransactionId}`),\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    reqBody,\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    pm.environment.get('USER_TRANSACTION_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(201);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, No Data Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"rating\": 5,\r\n    \"review\": \"Mantap\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/transactions/:id",
              "host": ["{{URL}}"],
              "path": ["transactions", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "bank",
      "item": [
        {
          "name": "Post Bank User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const reqBody = {\r",
                  "    bank_id: 1,\r",
                  "    account_number: 49218470,\r",
                  "    account_name: \"hfkdshflas\",\r",
                  "};\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload, token = undefined) {\r",
                  "    const header = {\r",
                  "        'Content-Type': 'application/json',\r",
                  "    };\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/banks/users'),\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    reqBody,\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(201);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, No Data Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"bank_id\": 1,\r\n    \"account_number\": \"49218470\",\r\n    \"account_name\": \"hfkdshflas\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/banks/users",
              "host": ["{{URL}}"],
              "path": ["banks", "users"]
            }
          },
          "response": []
        },
        {
          "name": "Get Banks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token = undefined) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/banks'),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": []
            },
            "url": {
              "raw": "{{URL}}/banks",
              "host": ["{{URL}}"],
              "path": ["banks"]
            }
          },
          "response": []
        },
        {
          "name": "Get Bank Detail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const makeRequest = function makeRequest(token = undefined, bankId = 0) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/banks/${bankId}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    pm.environment.get('BANK_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, Bank Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": []
            },
            "url": {
              "raw": "{{URL}}/banks/:id",
              "host": ["{{URL}}"],
              "path": ["banks", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Bank Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token = undefined) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/banks/users/get'),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/banks/users/get",
              "host": ["{{URL}}"],
              "path": ["banks", "users", "get"]
            }
          },
          "response": []
        },
        {
          "name": "Update Bank User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const reqBody = {\r",
                  "    bank_id: 1,\r",
                  "    account_number: 49218470,\r",
                  "    account_name: \"hfkdshflas\",\r",
                  "};\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload, token = undefined, bankUserId = 0) {\r",
                  "    const header = {\r",
                  "        'Content-Type': 'application/json',\r",
                  "    };\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'PATCH',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/banks/users/${bankUserId}`),\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    reqBody,\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    pm.environment.get('BANK_USER_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, Bank Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    {\r",
                  "        account_number: 49218470,\r",
                  "        account_name: \"hfkdshflas\"\r",
                  "    },\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, No `bank_id` Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"bank_id\": 1,\r\n    \"account_number\": \"49218470\",\r\n    \"account_name\": \"hfkdshflas\"\r\n}"
            },
            "url": {
              "raw": "{{URL}}/banks/users/:id",
              "host": ["{{URL}}"],
              "path": ["banks", "users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "3",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Bank User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token = undefined, bankUserId = 0) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'DELETE',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/banks/users/${bankUserId}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    pm.environment.get('BANK_USER_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, Bank User Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/banks/users/:id",
              "host": ["{{URL}}"],
              "path": ["banks", "users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "3",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "wallet",
      "item": [
        {
          "name": "Top Up",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const reqBody = {\r",
                  "    wallet_id: 1,\r",
                  "    balance_request: 43221,\r",
                  "    balance_transfer: 46382912,\r",
                  "};\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload, token = undefined) {\r",
                  "    const header = {\r",
                  "        'Content-Type': 'application/json',\r",
                  "    };\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/wallets/topup'),\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(201);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, Wallet Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, No Data Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"wallet_id\": 1,\r\n    \"balance_request\": 43221,\r\n    \"balance_transfer\": 46382912\r\n}"
            },
            "url": {
              "raw": "{{URL}}/wallets/topup",
              "host": ["{{URL}}"],
              "path": ["wallets", "topup"]
            }
          },
          "response": []
        },
        {
          "name": "Withdraw",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const reqBody = {\r",
                  "    wallet_id: 2,\r",
                  "    balance_request: 43221,\r",
                  "};\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload, token = undefined) {\r",
                  "    const header = {\r",
                  "        'Content-Type': 'application/json',\r",
                  "    };\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/wallets/withdraw'),\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(201);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, Wallet Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, No Data Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"wallet_id\": 2,\r\n    \"balance_request\": 43221\r\n}"
            },
            "url": {
              "raw": "{{URL}}/wallets/withdraw",
              "host": ["{{URL}}"],
              "path": ["wallets", "withdraw"]
            }
          },
          "response": []
        },
        {
          "name": "Get Wallets",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token = undefined) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn('{{URL}}/wallets'),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/wallets",
              "host": ["{{URL}}"],
              "path": ["wallets"]
            }
          },
          "response": []
        },
        {
          "name": "Get Top Up Histories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token, query = '') {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/wallets/topup/histories${query}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Success, Without Query', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?limit=1',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?limit=1`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "        const body = response.json();\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(body.success).to.eql(true);\r",
                  "        // pm.expect(body.data.length).to.eql(1);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=created_at&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=balance_request&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=balance_request&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=balance_transfer&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=balance_transfer&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=created_at&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=balance_request&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=balance_request&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=balance_transfer&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=balance_transfer&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, with Query `?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, with Query `?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/wallets/topup/histories",
              "host": ["{{URL}}"],
              "path": ["wallets", "topup", "histories"],
              "query": [
                {
                  "key": "orderDirection",
                  "value": "",
                  "description": "Available values: ASC, DESC",
                  "disabled": true
                },
                {
                  "key": "orderBy",
                  "value": "",
                  "description": "Available Fields: created_at, balance_request, balance_transfer",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Available Fields: balance_request, balance_transfer",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Available values: 0...n",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": null,
                  "description": "Available values: 0...n",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": null,
                  "description": "Available values: 0, 1, 2",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Withdraw Histories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token, query = '') {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/wallets/withdraw/histories${query}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Success, Without Query', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?limit=1',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?limit=1`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "        const body = response.json();\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(body.success).to.eql(true);\r",
                  "        // pm.expect(body.data.length).to.eql(1);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=created_at&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=balance_request&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=balance_request&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=created_at&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=balance_request&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=balance_request&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, with Query `?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, with Query `?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/wallets/withdraw/histories",
              "host": ["{{URL}}"],
              "path": ["wallets", "withdraw", "histories"],
              "query": [
                {
                  "key": "orderDirection",
                  "value": "",
                  "description": "Available values: ASC, DESC",
                  "disabled": true
                },
                {
                  "key": "orderBy",
                  "value": "",
                  "description": "Available Fields: created_at, balance_request",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Available Fields: balance_request",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Available values: 0...n",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": null,
                  "description": "Available values: 0...n",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": null,
                  "description": "Available values: 0, 1, 2",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Top Up Detail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const makeRequest = function makeRequest(token = undefined, topUpId = 0) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/wallets/topup/${topUpId}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    pm.environment.get('TOPUP_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, Top Up Data Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/wallets/topup/:id",
              "host": ["{{URL}}"],
              "path": ["wallets", "topup", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Withdraw Detail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const makeRequest = function makeRequest(token = undefined, withdrawId = 0) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/wallets/withdraw/${withdrawId}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    pm.environment.get('WITHDRAW_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        console.log(response)\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, Withdraw Data Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/wallets/withdraw/:id",
              "host": ["{{URL}}"],
              "path": ["wallets", "withdraw", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All User Top Up",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token, query = '') {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/wallets/topup/users/all${query}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Success, Without Query', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?limit=1',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?limit=1`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "        const body = response.json();\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(body.success).to.eql(true);\r",
                  "        // pm.expect(body.data.length).to.eql(1);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=created_at&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=balance_request&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=balance_request&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=balance_transfer&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=balance_transfer&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=created_at&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=balance_request&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=balance_request&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=balance_transfer&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=balance_transfer&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, with Query `?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, with Query `?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/wallets/topup/users/all",
              "host": ["{{URL}}"],
              "path": ["wallets", "topup", "users", "all"],
              "query": [
                {
                  "key": "orderDirection",
                  "value": "",
                  "description": "Available values: ASC, DESC",
                  "disabled": true
                },
                {
                  "key": "orderBy",
                  "value": "",
                  "description": "Available Fields: created_at, balance_request, balance_transfer",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Available Fields: balance_request, balance_transfer",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": null,
                  "description": "Available values: 0...n",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": null,
                  "description": "Available values: 0...n",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Available values: 0, 1, 2",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All User Withdraw",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(token, query = '') {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'GET',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/wallets/withdraw/users/all${query}`),\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Success, Without Query', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?limit=1',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?limit=1`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "        const body = response.json();\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(body.success).to.eql(true);\r",
                  "        // pm.expect(body.data.length).to.eql(1);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=created_at&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=balance_request&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=DESC&orderBy=balance_request&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=created_at&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=ASC&orderBy=balance_request&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success, with Query `?orderDirection=ASC&orderBy=balance_request&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, with Query `?orderDirection=DESCs&orderBy=created_at&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    '?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=&status=0',\r",
                  "), (_, response) => {\r",
                  "    pm.test('Fail, with Query `?orderDirection=DESC&orderBy=created_ats&search=&page=&limit=&status=0`', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest('this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{URL}}/wallets/withdraw/users/all",
              "host": ["{{URL}}"],
              "path": ["wallets", "withdraw", "users", "all"],
              "query": [
                {
                  "key": "orderDirection",
                  "value": "",
                  "description": "Available values: ASC, DESC",
                  "disabled": true
                },
                {
                  "key": "orderBy",
                  "value": "",
                  "description": "Available Fields: created_at, balance_request",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Available Fields: balance_request",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Available values: 0...n",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Available values: 0...n",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Available values: 0, 1, 2",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Upload Top Up Proof",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection');\r",
                  "\r",
                  "const makeRequest = function makeRequest(formdata, token = undefined, topUpId = 0) {\r",
                  "    const header = {};\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'POST',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/wallets/topup/${topUpId}/image`),\r",
                  "        body: {\r",
                  "            formdata,\r",
                  "            mode: 'formdata',\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.test('Success', () => {\r",
                  "    const { code, headers } = pm.response;\r",
                  "\r",
                  "    pm.expect(code).to.eql(201);\r",
                  "    pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "    pm.expect(pm.response.json().success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest([{}], pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, No `image` Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "image",
                  "type": "file",
                  "src": "Bliss.png"
                }
              ]
            },
            "url": {
              "raw": "{{URL}}/wallets/topup/:id/image",
              "host": ["{{URL}}"],
              "path": ["wallets", "topup", ":id", "image"],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Top Up Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const reqBody = { status: 1 };\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload, token = undefined, topUpId = 0) {\r",
                  "    const header = {\r",
                  "        'Content-Type': 'application/json',\r",
                  "    };\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'PATCH',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/wallets/topup/${topUpId}/status`),\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    reqBody,\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    pm.environment.get('TOPUP_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, Top Up Data Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail No `status` Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"status\": 1\r\n}"
            },
            "url": {
              "raw": "{{URL}}/wallets/topup/:id/status",
              "host": ["{{URL}}"],
              "path": ["wallets", "topup", ":id", "status"],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Withdraw Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const { Request } = require('postman-collection')\r",
                  "\r",
                  "const reqBody = { status: 1 };\r",
                  "\r",
                  "const makeRequest = function makeRequest(payload, token = undefined, withdrawId = 0) {\r",
                  "    const header = {\r",
                  "        'Content-Type': 'application/json',\r",
                  "    };\r",
                  "\r",
                  "    if (token) header.authorization = `Bearer ${token}`;\r",
                  "\r",
                  "    return new Request({\r",
                  "        header,\r",
                  "        method: 'PATCH',\r",
                  "        url: pm.environment.replaceIn(`{{URL}}/wallets/withdraw/${withdrawId}/status`),\r",
                  "        body: {\r",
                  "            mode: 'raw',\r",
                  "            raw: JSON.stringify(payload),\r",
                  "        },\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "pm.sendRequest(makeRequest(\r",
                  "    reqBody,\r",
                  "    pm.environment.get('TOKEN'),\r",
                  "    pm.environment.get('WITHDRAW_ID'),\r",
                  "), (_, response) => {\r",
                  "    pm.test('Success', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(200);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(true);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail, Withdraw Data Not Found', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(404);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest({}, pm.environment.get('TOKEN')), (_, response) => {\r",
                  "    pm.test('Fail No `status` Provided', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(422);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody, 'this-is-wrong'), (_, response) => {\r",
                  "    pm.test('Fail, Wrong API Key', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "pm.sendRequest(makeRequest(reqBody), (_, response) => {\r",
                  "    pm.test('Fail, API Key Not Given', () => {\r",
                  "        const { code, headers } = response;\r",
                  "\r",
                  "        pm.expect(code).to.eql(403);\r",
                  "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
                  "        pm.expect(response.json().success).to.eql(false);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{TOKEN}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": "JSON Type",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"status\": 1\r\n}"
            },
            "url": {
              "raw": "{{URL}}/wallets/withdraw/:id/status",
              "host": ["{{URL}}"],
              "path": ["wallets", "withdraw", ":id", "status"],
              "variable": [
                {
                  "key": "id",
                  "value": "6",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Test Server",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const { Request } = require('postman-collection')\r",
              "\r",
              "const sendRequestOne = new Request({\r",
              "    method: pm.request.method,\r",
              "    url: pm.request.url.toString()\r",
              "})\r",
              "pm.sendRequest(sendRequestOne, (_, response) => {\r",
              "    pm.test('test server is live', () => {\r",
              "        pm.expect(response.code).to.eql(200);\r",
              "        pm.expect(response.headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
              "        pm.expect(response.json().message).to.eql('hello world');\r",
              "    });\r",
              "});\r",
              "\r",
              "const sendRequestTwo = new Request({\r",
              "    method: pm.request.method,\r",
              "    url: pm.environment.replaceIn(\"{{URL}}/not-exist\")\r",
              "})\r",
              "pm.sendRequest(sendRequestTwo, (_, response) => {\r",
              "    pm.test('test url no exist', () => {\r",
              "        const { code, headers } = response;\r",
              "\r",
              "        pm.expect(code).to.eql(404);\r",
              "        pm.expect(headers.toObject()['content-type']).to.eql('application/json; charset=utf-8');\r",
              "        pm.expect(response.json().message).to.eql('not found');\r",
              "    });\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{URL}}",
          "host": ["{{URL}}"]
        }
      },
      "response": []
    }
  ]
}
